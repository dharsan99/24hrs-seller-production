{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://ng-password-validator/lib/ng-password-validator.service.ts","ng://ng-password-validator/lib/options.ts","ng://ng-password-validator/lib/data.service.ts","ng://ng-password-validator/lib/ng-password-validator.component.ts","ng://ng-password-validator/lib/ng-password-validator.directive.ts","ng://ng-password-validator/lib/ng-password-validator.module.ts"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","__decorate","decorators","target","key","desc","d","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__param","paramIndex","decorator","__values","o","Symbol","iterator","m","next","value","done","TypeError","NgPasswordValidatorService","InjectionToken","defaultOptions","placement","z-index","custom-class","shadow","theme","offset","heading","successMessage","rules","password","type","min","max","include-symbol","include-number","include-lowercase-characters","include-uppercase-characters","initializeStage","DataService","BehaviorSubject","updatedValue","asObservable","updateValue","data","Injectable","NgPasswordValidatorComponent","elementRef","renderer","dataService","passwordStatus","isSecure","Show","events","EventEmitter","passwordOptions","transitionEnd","show","emit","setPosition","hostClassShow","options","element","elementPosition","ngOnInit","_this","setCustomClass","setStyles","setTheme","setCustomText","subscribe","propName","values","every","ngOnChanges","changes","currentValue","setHostStyle","setPlacementClass","isPlacementSet","placements_1","placements_1_1","addClass","nativeElement","topStyle","leftStyle","isSvg","SVGElement","popup","isCustomPosition","right","elementHeight","getBoundingClientRect","height","offsetHeight","elementWidth","width","offsetWidth","popupHeight","clientHeight","popupWidth","clientWidth","scrollY","window","pageYOffset","top","popupOffset","left","hostStyleTop","hostStyleLeft","setZIndex","hostStyleZIndex","split","forEach","className","setAnimationDuration","hostStyleTransition","hostClassShadow","hostStyleMaxWidth","hostStyleWidth","ElementRef","Renderer2","Input","HostBinding","HostListener","Component","selector","template","host","class","NgPasswordValidatorDirective","initOptions","componentFactoryResolver","appRef","injector","regExpForLength","regExpForOneUpper","regExpForOneLower","regExpForOneDigit","regExpForSpecialCharacters","isValid","inputValue","valid","deepMerge","createPasswordRegex","componentRef","hostView","destroyed","onMouseEnter","updatePasswordOptions","checkPassword","onMouseLeave","destroyPopup","onInput","changedOptions","getProperties","applyOptionsDefault","ngOnDestroy","componentSubscribe","unsubscribe","source","_b","keys","_c","RegExp","match","directiveProperties","customProperties","prop","getElementPosition","createPopup","appendComponentToBody","showPopupElem","isPopupDestroyed","hidePopup","detachView","destroy","position","popupPosition","instance","component","resolveComponentFactory","create","attachView","domElem","rootNodes","document","body","appendChild","event","handleEvents","defaultOption","hide","Optional","Inject","args","ComponentFactoryResolver","ApplicationRef","Injector","Output","Directive","exportAs","NgPasswordValidatorModule","forRoot","ngModule","NgPasswordValidatorModule_1","providers","provide","useValue","NgModule","declarations","imports","CommonModule","exports","entryComponents"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","\nimport { InjectionToken } from \"@angular/core\";\n\nimport { NgPasswordValidatorOptions } from \"./ng-password-validator.interface\";\n\n/**\n * This is not a real service, but it looks like it from the outside.\n * It's just an InjectionToken used to import the config (initOptions) object, provided from the outside\n */\nexport const NgPasswordValidatorService = new InjectionToken<NgPasswordValidatorOptions>(\"NgPasswordValidatorOptions\");\n","import { IStatus, NgPasswordValidatorOptions } from \"./ng-password-validator.interface\";\n\nexport const defaultOptions: NgPasswordValidatorOptions = {\n    placement: \"bottom\",\n    \"z-index\": 0,\n    \"custom-class\": \"custom-class\",\n    shadow: true,\n    theme: \"pro\",\n    offset: 8,\n    heading: \"Password Policy\",\n    successMessage: \"Awesome! Password requirement fulfilled.\",\n    rules: {\n        password: {\n            type: \"range\",\n            length: 8,\n            min: 6,\n            max: 10,\n        },\n        \"include-symbol\": true,\n        \"include-number\": true,\n        \"include-lowercase-characters\": true,\n        \"include-uppercase-characters\": true,\n    }\n};\n\nexport const initializeStage: IStatus = {\n    password: false,\n    \"include-symbol\": false,\n    \"include-number\": false,\n    \"include-lowercase-characters\": false,\n    \"include-uppercase-characters\": false,\n};\n","import { Injectable } from \"@angular/core\";\nimport { BehaviorSubject } from \"rxjs\";\n\nimport { IStatus } from \"./ng-password-validator.interface\";\nimport { initializeStage } from \"./options\";\n\n@Injectable()\nexport class DataService {\n\n    private value = new BehaviorSubject(initializeStage);\n    updatedValue = this.value.asObservable();\n\n\n    /**\n     * Update value\n     *\n     * @param {IStatus} data\n     * @memberof DataService\n     */\n    updateValue(data: IStatus): void {\n        this.value.next(data);\n    }\n\n}\n","import {\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    HostListener,\n    Input,\n    OnChanges,\n    OnInit,\n    Renderer2,\n    SimpleChanges\n} from \"@angular/core\";\n\nimport { DataService } from \"./data.service\";\nimport { IElementPosition, IRules, IStatus, NgPasswordValidatorOptions } from \"./ng-password-validator.interface\";\nimport { defaultOptions } from \"./options\";\n@Component({\n    selector: \"NgPasswordValidator\",\n    templateUrl: \"./ng-password-validator.component.html\",\n    host: { class: \"popup\" },\n    styleUrls: [\"./ng-password-validator.component.scss\"]\n})\nexport class NgPasswordValidatorComponent implements OnInit, OnChanges {\n    heading: string;\n    successMessage: string;\n    passwordStatus = {\n        password: false,\n        \"include-symbol\": false,\n        \"include-number\": false,\n        \"include-lowercase-characters\": false,\n        \"include-uppercase-characters\": false,\n    };\n    isSecure = false;\n    Show = false;\n    events = new EventEmitter();\n    passwordOptions: NgPasswordValidatorOptions = { ...defaultOptions };\n\n    @Input() data: any;\n\n    @HostBinding(\"style.top\") hostStyleTop: string;\n    @HostBinding(\"style.left\") hostStyleLeft: string;\n    @HostBinding(\"style.z-index\") hostStyleZIndex: number;\n    @HostBinding(\"style.transition\") hostStyleTransition: string;\n    @HostBinding(\"style.width\") hostStyleWidth: string;\n    @HostBinding(\"style.max-width\") hostStyleMaxWidth: string;\n    @HostBinding(\"style.pointer-events\") hostStylePointerEvents: string;\n    @HostBinding(\"class.popup-show\") hostClassShow: boolean;\n    @HostBinding(\"class.popup-shadow\") hostClassShadow: boolean;\n\n    /**\n     * Host listener transition end\n     *\n     * @memberof NgPasswordValidatorComponent\n     */\n    @HostListener(\"transitionend\", [\"\"])\n    transitionEnd(): void {\n        if (this.show) {\n            this.events.emit({\n                type: \"shown\"\n            });\n        }\n    }\n\n    @Input() set show(value: boolean) {\n        if (value) {\n            this.setPosition();\n        }\n        this.Show = this.hostClassShow = value;\n    }\n\n    get show(): boolean {\n        return this.Show;\n    }\n\n    get placement(): string {\n        return this.data.options.placement;\n    }\n\n    get element() {\n        return this.data.element;\n    }\n\n    get elementPosition(): IElementPosition {\n        return this.data.elementPosition;\n    }\n\n    get options(): NgPasswordValidatorOptions {\n        return this.data.options;\n    }\n\n    get popupOffset(): number {\n        switch (this.data.options.offset) {\n            case \"\":\n                return defaultOptions.offset;\n\n            case \"0\":\n                return +this.data.options.offset;\n\n            default:\n                return +this.data.options.offset;\n        }\n    }\n\n    get rules(): IRules {\n        return { ...this.data.defaultOptions.rules, ... this.data.options.rules };\n    }\n\n    get defaultOptions(): NgPasswordValidatorOptions {\n        return this.data.defaultOptions;\n    }\n\n    constructor(private elementRef: ElementRef, private renderer: Renderer2, private dataService: DataService) { }\n\n    /**\n     * Component initialization\n     *\n     * @memberof NgPasswordValidatorComponent\n     */\n    ngOnInit(): void {\n        this.setCustomClass();\n        this.setStyles();\n        this.setTheme();\n        this.setCustomText();\n        this.dataService.updatedValue.subscribe((data: IStatus) => {\n            this.passwordStatus = { ... this.passwordStatus, ...data };\n            for (const propName in this.passwordOptions.rules) {\n                if (!this.passwordOptions.rules[propName]) {\n                    delete this.passwordStatus[propName];\n                }\n            }\n            this.isSecure = Object.values(this.passwordStatus).every((value: boolean) => value);\n        });\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes && changes.data && changes.data.currentValue) {\n            this.data = changes.data.currentValue;\n        }\n    }\n\n    /**\n     * Set popup window position\n     *\n     * @returns {void}\n     * @memberof NgPasswordValidatorComponent\n     */\n    setPosition(): void {\n        if (this.setHostStyle(this.placement)) {\n            this.setPlacementClass(this.placement);\n\n            return;\n        } else {\n            // Is popup outside the visible area\n            const placements = [\"top\", \"right\", \"bottom\", \"left\"];\n            let isPlacementSet;\n\n            for (const placement of placements) {\n                if (this.setHostStyle(placement)) {\n                    this.setPlacementClass(placement);\n                    isPlacementSet = true;\n\n                    return;\n                }\n            }\n\n            // Set original placement\n            if (!isPlacementSet) {\n                this.setHostStyle(this.placement);\n                this.setPlacementClass(this.placement);\n            }\n        }\n    }\n\n    /**\n     * Set popup placement class\n     *\n     * @param {string} placement\n     * @memberof NgPasswordValidatorComponent\n     */\n    setPlacementClass(placement: string): void {\n        this.renderer.addClass(this.elementRef.nativeElement, \"popup-\" + placement);\n    }\n\n    /**\n     * Set host element style\n     *\n     * @param {string} placement\n     * @returns {boolean}\n     * @memberof NgPasswordValidatorComponent\n     */\n    setHostStyle(placement: string): boolean {\n        const isSvg = this.element instanceof SVGElement;\n        const popup = this.elementRef.nativeElement;\n        const isCustomPosition = !this.elementPosition.right;\n\n        let elementHeight = isSvg ? this.element.getBoundingClientRect().height : this.element.offsetHeight;\n        let elementWidth = isSvg ? this.element.getBoundingClientRect().width : this.element.offsetWidth;\n        const popupHeight = popup.clientHeight;\n        const popupWidth = popup.clientWidth;\n        const scrollY = window.pageYOffset;\n\n        if (isCustomPosition) {\n            elementHeight = 0;\n            elementWidth = 0;\n        }\n\n        let topStyle;\n        let leftStyle;\n\n        switch (placement) {\n            case \"top\":\n                topStyle = (this.elementPosition.top + scrollY) - (popupHeight + this.popupOffset);\n                leftStyle = this.elementPosition.left;\n\n                break;\n\n            case \"bottom\":\n                topStyle = (this.elementPosition.top + scrollY) + elementHeight + this.popupOffset;\n                leftStyle = this.elementPosition.left;\n\n                break;\n            case \"left\":\n                leftStyle = this.elementPosition.left - popupWidth - this.popupOffset;\n                topStyle = (this.elementPosition.top + scrollY);\n\n                break;\n\n            case \"right\":\n                leftStyle = this.elementPosition.left + elementWidth + this.popupOffset;\n                topStyle = (this.elementPosition.top + scrollY);\n\n        }\n\n        this.hostStyleTop = topStyle + \"px\";\n        this.hostStyleLeft = leftStyle + \"px\";\n\n        return true;\n    }\n\n    /**\n     * Sets Z-index\n     *\n     * @memberof NgPasswordValidatorComponent\n     */\n    setZIndex(): void {\n        if (this.options[\"z-index\"] !== 0) {\n            this.hostStyleZIndex = this.options[\"z-index\"];\n        }\n    }\n\n    /**\n     * Ste custom class name\n     *\n     * @memberof NgPasswordValidatorComponent\n     */\n    setCustomClass(): void {\n        if (this.options[\"customClass\"]) {\n            this.options[\"customClass\"].split(\" \").forEach((className: string) => {\n                this.renderer.addClass(this.elementRef.nativeElement, className);\n            });\n        }\n    }\n\n    /**\n     * Set theme\n     *\n     * @memberof NgPasswordValidatorComponent\n     */\n    setTheme(): void {\n        if (this.options[\"theme\"]) {\n            this.renderer.addClass(this.elementRef.nativeElement, \"popup-\" + this.options[\"theme\"]);\n        }\n    }\n\n    setCustomText(): void {\n        if (this.options[\"heading\"]) {\n            this.heading = this.options[\"heading\"];\n        }\n\n        if (this.options[\"successMessage\"]) {\n            this.successMessage = this.options[\"successMessage\"];\n        }\n    }\n\n\n    /**\n     * Sets the animation duration\n     *\n     * @memberof NgPasswordValidatorComponent\n     */\n    setAnimationDuration(): void {\n        this.hostStyleTransition = \"opacity \" + this.options[\"animation-duration\"] + \"ms\";\n    }\n\n    /**\n     * Set popup window style\n     *\n     * @memberof NgPasswordValidatorComponent\n     */\n    setStyles(): void {\n        this.setZIndex();\n        this.setAnimationDuration();\n\n        this.hostClassShadow = this.options[\"shadow\"];\n        this.hostStyleMaxWidth = this.options[\"max-width\"] + \"px\";\n        this.hostStyleWidth = this.options[\"width\"] ? this.options[\"width\"] + \"px\" : \"\";\n    }\n}\n","import {\n    ApplicationRef,\n    ComponentFactoryResolver,\n    Directive,\n    ElementRef,\n    EmbeddedViewRef,\n    EventEmitter,\n    HostListener,\n    Inject,\n    Injector,\n    Input,\n    OnChanges,\n    OnDestroy,\n    Optional,\n    Output,\n    SimpleChange\n} from \"@angular/core\";\nimport { Subscription } from \"rxjs\";\n\nimport { DataService } from \"./data.service\";\nimport { NgPasswordValidatorComponent } from \"./ng-password-validator.component\";\nimport { IElementPosition, IPosition, NgPasswordValidatorOptions } from \"./ng-password-validator.interface\";\nimport { NgPasswordValidatorService } from \"./ng-password-validator.service\";\nimport { defaultOptions } from \"./options\";\n\nexport interface HostComponent {\n    data: any;\n    show: boolean;\n    close: boolean;\n    events: any;\n}\n\n@Directive({\n    selector: \"[NgPasswordValidator]\",\n    exportAs: \"NgPasswordValidator\",\n})\n\nexport class NgPasswordValidatorDirective implements OnDestroy, OnChanges {\n    regExpForLength = /^(.){8}$/;\n    regExpForOneUpper = /^(?=.*[A-Z])(.*)$/;\n    regExpForOneLower = /^(?=.*[a-z])(.*)$/;\n    regExpForOneDigit = /^(?=.*[0-9])(.*)$/;\n    regExpForSpecialCharacters = /^(?=.*[!@#$%^&*])([a-zA-Z0-9!@#$%^&*]*)$/;\n\n    isValid = false;\n    inputValue = \"\";\n    componentRef: any;\n    elementPosition: IElementPosition;\n    passwordOptions: NgPasswordValidatorOptions;\n    componentSubscribe: Subscription;\n\n    @Input(\"options\") set optionsInput(value: NgPasswordValidatorOptions) {\n        if (value && defaultOptions) {\n            this.passwordOptions = this.deepMerge(defaultOptions, value);\n            this.createPasswordRegex();\n        }\n    }\n    @Input(\"NgPasswordValidator\") popup: NgPasswordValidatorOptions;\n    @Input(\"placement\") placement: string;\n    @Input(\"z-index\") zIndex: number;\n    @Input(\"animation-duration\") animationDuration: number;\n    @Input(\"custom-class\") customClass: string;\n    @Input(\"shadow\") shadow: boolean;\n    @Input(\"theme\") theme: \"basic\" | \"pro\";\n    @Input(\"offset\") offset: number;\n    @Input(\"width\") width: number;\n    @Input(\"max-width\") maxWidth: number;\n    @Input(\"position\") position: IPosition;\n    @Input(\"heading\") heading: string;\n    @Input(\"successMessage\") successMessage: string;\n\n    @Output() events: EventEmitter<any> = new EventEmitter<any>();\n    @Output() valid: EventEmitter<boolean> = new EventEmitter();\n\n    constructor(\n        @Optional() @Inject(NgPasswordValidatorService) private initOptions,\n        private elementRef: ElementRef,\n        private componentFactoryResolver: ComponentFactoryResolver,\n        private appRef: ApplicationRef,\n        private dataService: DataService,\n        private injector: Injector) {\n    }\n\n    get options() {\n        return this.passwordOptions;\n    }\n\n    get isPopupDestroyed(): boolean {\n        return this.componentRef && this.componentRef.hostView.destroyed;\n    }\n\n    /**\n     * Get popup position\n     *\n     * @readonly\n     * @type {(IElementPosition | IPosition)}\n     * @memberof NgPasswordValidatorDirective\n     */\n    get popupPosition(): IElementPosition | IPosition {\n        if (this.options[\"position\"]) {\n            return this.options[\"position\"];\n        } else {\n            return this.elementPosition;\n        }\n    }\n\n    /**\n     * Focus in input field\n     *\n     * @memberof NgPasswordValidatorDirective\n     */\n    @HostListener(\"focusin\", [\"$event.target.value\"])\n    onMouseEnter(value: any): void {\n        this.updatePasswordOptions();\n        this.show();\n        this.checkPassword(value);\n    }\n    /**\n     * Update password options\n     *\n     * @memberof NgPasswordValidatorDirective\n     */\n    updatePasswordOptions(): void {\n        if (this.popup && defaultOptions) {\n            this.passwordOptions = this.deepMerge(defaultOptions, this.popup);\n            this.createPasswordRegex();\n        }\n    }\n\n    /**\n     * Focus out of input field\n     *\n     * @memberof NgPasswordValidatorDirective\n     */\n    @HostListener(\"focusout\")\n    onMouseLeave(): void {\n        this.destroyPopup();\n        this.valid.emit(this.isValid);\n    }\n\n    /**\n     * Input field value\n     *\n     * @param {string} value\n     * @memberof NgPasswordValidatorDirective\n     */\n    @HostListener(\"input\", [\"$event.target.value\"])\n    onInput(value: string): void {\n        this.checkPassword(value);\n    }\n\n    /**\n     * On input change\n     *\n     * @param {{ popup: SimpleChange }} changes\n     * @memberof NgPasswordValidatorDirective\n     */\n    ngOnChanges(changes: { popup: SimpleChange }): void {\n        const changedOptions = this.getProperties(changes);\n        this.applyOptionsDefault(changedOptions, defaultOptions);\n    }\n\n    /**\n     * Destroy the pop up and unsubscribe to release the memory\n     *\n     * @memberof NgPasswordValidatorDirective\n     */\n    ngOnDestroy(): void {\n        this.destroyPopup();\n        if (this.componentSubscribe) {\n            this.componentSubscribe.unsubscribe();\n        }\n    }\n\n    /**\n     * Deep merge objects\n     *\n     * @param {NgPasswordValidatorOptions} target\n     * @param {NgPasswordValidatorOptions} source\n     * @returns {NgPasswordValidatorOptions}\n     * @memberof NgPasswordValidatorDirective\n     */\n    deepMerge(target: NgPasswordValidatorOptions, source: NgPasswordValidatorOptions): NgPasswordValidatorOptions {\n        // Iterate through `source` properties and if an `Object` set property to merge of `target` and `source` properties\n        for (const key of Object.keys(source)) {\n            if (source[key] instanceof Object) { Object.assign(source[key], this.deepMerge(target[key], source[key])); }\n        }\n\n        // Join `target` and modified `source`\n        Object.assign(target || {}, source);\n\n        return target;\n    }\n\n    /**\n     * Create password regex\n     *\n     * @memberof NgPasswordValidatorDirective\n     */\n    createPasswordRegex(): void {\n        if (this.passwordOptions.rules.password) {\n            switch (this.passwordOptions.rules[\"password\"].type) {\n                case \"number\":\n                    this.regExpForLength = new RegExp(`^(.){${this.passwordOptions.rules[\"password\"].length}}$`);\n                    break;\n\n                case \"range\":\n                    this.regExpForLength =\n                        new RegExp(`^(.){${this.passwordOptions.rules[\"password\"].min},${this.passwordOptions.rules[\"password\"].max}}$`);\n            }\n        }\n    }\n\n    /**\n     * Check password if valid or not\n     *\n     * @param {string} inputValue\n     * @memberof NgPasswordValidatorDirective\n     */\n    checkPassword(inputValue: string): void {\n        const data = {\n            password: inputValue && inputValue.length && inputValue.match(this.regExpForLength) ? true : false,\n            \"include-symbol\": inputValue && inputValue.length && inputValue.match(this.regExpForSpecialCharacters) ? true : false,\n            \"include-number\": inputValue && inputValue.length && inputValue.match(this.regExpForOneDigit) ? true : false,\n            \"include-lowercase-characters\": inputValue && inputValue.length && inputValue.match(this.regExpForOneLower) ? true : false,\n            \"include-uppercase-characters\": inputValue && inputValue.length && inputValue.match(this.regExpForOneUpper) ? true : false,\n        };\n\n        for (const propName in this.passwordOptions.rules) {\n            if (!this.passwordOptions.rules[propName]) {\n                delete data[propName];\n            }\n        }\n        this.isValid = Object.values(data).every((value: boolean) => value);\n        this.dataService.updateValue(data);\n    }\n\n    /**\n     * Get properties\n     *\n     * @param {{ popup: SimpleChange }} changes\n     * @returns {{ popup: any }}\n     * @memberof NgPasswordValidatorDirective\n     */\n    getProperties(changes: { popup: SimpleChange }): { popup: any } {\n        const directiveProperties: any = {};\n        let customProperties: any = {};\n        let allProperties: any = {};\n\n        // tslint:disable-next-line: forin\n        for (const prop in changes) {\n            if (prop !== \"options\") {\n                directiveProperties[prop] = changes[prop].currentValue;\n            }\n            if (prop === \"options\") {\n                customProperties = changes[prop].currentValue;\n            }\n        }\n\n        allProperties = Object.assign({}, customProperties, directiveProperties);\n\n        return allProperties;\n    }\n\n    /**\n     * Get element position\n     *\n     * @memberof NgPasswordValidatorDirective\n     */\n    getElementPosition(): void {\n        this.elementPosition = this.elementRef.nativeElement.getBoundingClientRect();\n    }\n\n    /**\n     * Create Popup\n     *\n     * @memberof NgPasswordValidatorDirective\n     */\n    createPopup(): void {\n        this.getElementPosition();\n        this.appendComponentToBody(NgPasswordValidatorComponent);\n        this.showPopupElem();\n    }\n\n    /**\n     * Destroy Popup\n     *\n     * @returns {void}\n     * @memberof NgPasswordValidatorDirective\n     */\n    destroyPopup(): void {\n        if (!this.isPopupDestroyed) {\n            this.hidePopup();\n\n            if (!this.componentRef || this.isPopupDestroyed) {\n                return;\n            }\n\n            this.appRef.detachView(this.componentRef.hostView);\n            this.componentRef.destroy();\n            this.events.emit({\n                type: \"hidden\",\n                position: this.popupPosition\n            });\n        }\n    }\n\n    /**\n     * Show popup window\n     *\n     * @memberof NgPasswordValidatorDirective\n     */\n    showPopupElem(): void {\n        (this.componentRef.instance as HostComponent).show = true;\n        this.events.emit({\n            type: \"show\",\n            position: this.popupPosition\n        });\n    }\n\n    /**\n     * Hide popup window\n     *\n     * @returns {void}\n     * @memberof NgPasswordValidatorDirective\n     */\n    hidePopup(): void {\n        if (!this.componentRef || this.isPopupDestroyed) {\n            return;\n        }\n        (this.componentRef.instance as HostComponent).show = false;\n        this.events.emit({\n            type: \"hide\",\n            position: this.popupPosition\n        });\n    }\n\n    /**\n     * Append created popup window to body\n     *\n     * @param {*} component\n     * @memberof NgPasswordValidatorDirective\n     */\n    appendComponentToBody(component: any): void {\n        this.componentRef = this.componentFactoryResolver\n            .resolveComponentFactory(component)\n            .create(this.injector);\n        (this.componentRef.instance as HostComponent).data = {\n            element: this.elementRef.nativeElement,\n            elementPosition: this.popupPosition,\n            options: this.options,\n            defaultOptions\n        };\n\n        this.appRef.attachView(this.componentRef.hostView);\n        const domElem = (this.componentRef.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\n        document.body.appendChild(domElem);\n\n        this.componentSubscribe = (this.componentRef.instance as HostComponent).events.subscribe((event: any) => {\n            this.handleEvents(event);\n        });\n    }\n\n    /**\n     * Reset/switching back to default options\n     *\n     * @param {NgPasswordValidatorOptions} defaultOption\n     * @param {{ popup: SimpleChange }} options\n     * @memberof NgPasswordValidatorDirective\n     */\n    applyOptionsDefault(options: { popup: SimpleChange }, defaultOption: NgPasswordValidatorOptions): void {\n        this.initOptions = Object.assign({}, this.initOptions || {}, options, defaultOption);\n    }\n\n    /**\n     * Handle events\n     *\n     * @param {*} event\n     * @memberof NgPasswordValidatorDirective\n     */\n    handleEvents(event: any): void {\n        if (event.type === \"shown\") {\n            this.events.emit({\n                type: \"shown\",\n                position: this.popupPosition\n            });\n        }\n    }\n\n    /**\n     * It creates popup window to show password requirement\n     *\n     * @memberof NgPasswordValidatorDirective\n     */\n    show(): void {\n        if (!this.componentRef || this.isPopupDestroyed) {\n            this.createPopup();\n        } else if (!this.isPopupDestroyed) {\n            this.showPopupElem();\n        }\n    }\n\n    /**\n     * Hide/Destroys popup windows\n     *\n     * @memberof NgPasswordValidatorDirective\n     */\n    hide(): void {\n        this.destroyPopup();\n    }\n}\n","import { CommonModule } from \"@angular/common\";\nimport { ModuleWithProviders, NgModule } from \"@angular/core\";\n\nimport { DataService } from \"./data.service\";\nimport { NgPasswordValidatorComponent } from \"./ng-password-validator.component\";\nimport { NgPasswordValidatorDirective } from \"./ng-password-validator.directive\";\nimport { NgPasswordValidatorOptions } from \"./ng-password-validator.interface\";\nimport { NgPasswordValidatorService } from \"./ng-password-validator.service\";\n@NgModule({\n    declarations: [\n        NgPasswordValidatorDirective,\n        NgPasswordValidatorComponent,\n    ],\n    imports: [\n        CommonModule\n    ],\n    providers: [DataService],\n    exports: [\n        NgPasswordValidatorDirective\n    ],\n    entryComponents: [\n        NgPasswordValidatorComponent\n    ]\n})\nexport class NgPasswordValidatorModule {\n\n    /**\n     * Password validator module\n     *\n     * @static\n     * @param {NgPasswordValidatorOptions} initOptions\n     * @returns {ModuleWithProviders<NgPasswordValidatorModule>}\n     * @memberof NgPasswordValidatorModule\n     */\n    static forRoot(initOptions: NgPasswordValidatorOptions): ModuleWithProviders<NgPasswordValidatorModule> {\n        return {\n            ngModule: NgPasswordValidatorModule,\n            providers: [\n                {\n                    provide: NgPasswordValidatorService,\n                    useValue: initOptions\n                }\n            ]\n        };\n    }\n}\n"]}