import { __decorate, __param } from "tslib";
import { ApplicationRef, ComponentFactoryResolver, Directive, ElementRef, EmbeddedViewRef, EventEmitter, HostListener, Inject, Injector, Input, OnChanges, OnDestroy, Optional, Output, SimpleChange } from "@angular/core";
import { DataService } from "./data.service";
import { NgPasswordValidatorComponent } from "./ng-password-validator.component";
import { NgPasswordValidatorService } from "./ng-password-validator.service";
import { defaultOptions } from "./options";
let NgPasswordValidatorDirective = class NgPasswordValidatorDirective {
    constructor(initOptions, elementRef, componentFactoryResolver, appRef, dataService, injector) {
        this.initOptions = initOptions;
        this.elementRef = elementRef;
        this.componentFactoryResolver = componentFactoryResolver;
        this.appRef = appRef;
        this.dataService = dataService;
        this.injector = injector;
        this.regExpForLength = /^(.){8}$/;
        this.regExpForOneUpper = /^(?=.*[A-Z])(.*)$/;
        this.regExpForOneLower = /^(?=.*[a-z])(.*)$/;
        this.regExpForOneDigit = /^(?=.*[0-9])(.*)$/;
        this.regExpForSpecialCharacters = /^(?=.*[!@#$%^&*])([a-zA-Z0-9!@#$%^&*]*)$/;
        this.isValid = false;
        this.inputValue = "";
        this.events = new EventEmitter();
        this.valid = new EventEmitter();
    }
    set optionsInput(value) {
        if (value && defaultOptions) {
            this.passwordOptions = this.deepMerge(defaultOptions, value);
            this.createPasswordRegex();
        }
    }
    get options() {
        return this.passwordOptions;
    }
    get isPopupDestroyed() {
        return this.componentRef && this.componentRef.hostView.destroyed;
    }
    /**
     * Get popup position
     *
     * @readonly
     * @type {(IElementPosition | IPosition)}
     * @memberof NgPasswordValidatorDirective
     */
    get popupPosition() {
        if (this.options["position"]) {
            return this.options["position"];
        }
        else {
            return this.elementPosition;
        }
    }
    /**
     * Focus in input field
     *
     * @memberof NgPasswordValidatorDirective
     */
    onMouseEnter(value) {
        this.updatePasswordOptions();
        this.show();
        this.checkPassword(value);
    }
    /**
     * Update password options
     *
     * @memberof NgPasswordValidatorDirective
     */
    updatePasswordOptions() {
        if (this.popup && defaultOptions) {
            this.passwordOptions = this.deepMerge(defaultOptions, this.popup);
            this.createPasswordRegex();
        }
    }
    /**
     * Focus out of input field
     *
     * @memberof NgPasswordValidatorDirective
     */
    onMouseLeave() {
        this.destroyPopup();
        this.valid.emit(this.isValid);
    }
    /**
     * Input field value
     *
     * @param {string} value
     * @memberof NgPasswordValidatorDirective
     */
    onInput(value) {
        this.checkPassword(value);
    }
    /**
     * On input change
     *
     * @param {{ popup: SimpleChange }} changes
     * @memberof NgPasswordValidatorDirective
     */
    ngOnChanges(changes) {
        const changedOptions = this.getProperties(changes);
        this.applyOptionsDefault(changedOptions, defaultOptions);
    }
    /**
     * Destroy the pop up and unsubscribe to release the memory
     *
     * @memberof NgPasswordValidatorDirective
     */
    ngOnDestroy() {
        this.destroyPopup();
        if (this.componentSubscribe) {
            this.componentSubscribe.unsubscribe();
        }
    }
    /**
     * Deep merge objects
     *
     * @param {NgPasswordValidatorOptions} target
     * @param {NgPasswordValidatorOptions} source
     * @returns {NgPasswordValidatorOptions}
     * @memberof NgPasswordValidatorDirective
     */
    deepMerge(target, source) {
        // Iterate through `source` properties and if an `Object` set property to merge of `target` and `source` properties
        for (const key of Object.keys(source)) {
            if (source[key] instanceof Object) {
                Object.assign(source[key], this.deepMerge(target[key], source[key]));
            }
        }
        // Join `target` and modified `source`
        Object.assign(target || {}, source);
        return target;
    }
    /**
     * Create password regex
     *
     * @memberof NgPasswordValidatorDirective
     */
    createPasswordRegex() {
        if (this.passwordOptions.rules.password) {
            switch (this.passwordOptions.rules["password"].type) {
                case "number":
                    this.regExpForLength = new RegExp(`^(.){${this.passwordOptions.rules["password"].length}}$`);
                    break;
                case "range":
                    this.regExpForLength =
                        new RegExp(`^(.){${this.passwordOptions.rules["password"].min},${this.passwordOptions.rules["password"].max}}$`);
            }
        }
    }
    /**
     * Check password if valid or not
     *
     * @param {string} inputValue
     * @memberof NgPasswordValidatorDirective
     */
    checkPassword(inputValue) {
        const data = {
            password: inputValue && inputValue.length && inputValue.match(this.regExpForLength) ? true : false,
            "include-symbol": inputValue && inputValue.length && inputValue.match(this.regExpForSpecialCharacters) ? true : false,
            "include-number": inputValue && inputValue.length && inputValue.match(this.regExpForOneDigit) ? true : false,
            "include-lowercase-characters": inputValue && inputValue.length && inputValue.match(this.regExpForOneLower) ? true : false,
            "include-uppercase-characters": inputValue && inputValue.length && inputValue.match(this.regExpForOneUpper) ? true : false,
        };
        for (const propName in this.passwordOptions.rules) {
            if (!this.passwordOptions.rules[propName]) {
                delete data[propName];
            }
        }
        this.isValid = Object.values(data).every((value) => value);
        this.dataService.updateValue(data);
    }
    /**
     * Get properties
     *
     * @param {{ popup: SimpleChange }} changes
     * @returns {{ popup: any }}
     * @memberof NgPasswordValidatorDirective
     */
    getProperties(changes) {
        const directiveProperties = {};
        let customProperties = {};
        let allProperties = {};
        // tslint:disable-next-line: forin
        for (const prop in changes) {
            if (prop !== "options") {
                directiveProperties[prop] = changes[prop].currentValue;
            }
            if (prop === "options") {
                customProperties = changes[prop].currentValue;
            }
        }
        allProperties = Object.assign({}, customProperties, directiveProperties);
        return allProperties;
    }
    /**
     * Get element position
     *
     * @memberof NgPasswordValidatorDirective
     */
    getElementPosition() {
        this.elementPosition = this.elementRef.nativeElement.getBoundingClientRect();
    }
    /**
     * Create Popup
     *
     * @memberof NgPasswordValidatorDirective
     */
    createPopup() {
        this.getElementPosition();
        this.appendComponentToBody(NgPasswordValidatorComponent);
        this.showPopupElem();
    }
    /**
     * Destroy Popup
     *
     * @returns {void}
     * @memberof NgPasswordValidatorDirective
     */
    destroyPopup() {
        if (!this.isPopupDestroyed) {
            this.hidePopup();
            if (!this.componentRef || this.isPopupDestroyed) {
                return;
            }
            this.appRef.detachView(this.componentRef.hostView);
            this.componentRef.destroy();
            this.events.emit({
                type: "hidden",
                position: this.popupPosition
            });
        }
    }
    /**
     * Show popup window
     *
     * @memberof NgPasswordValidatorDirective
     */
    showPopupElem() {
        this.componentRef.instance.show = true;
        this.events.emit({
            type: "show",
            position: this.popupPosition
        });
    }
    /**
     * Hide popup window
     *
     * @returns {void}
     * @memberof NgPasswordValidatorDirective
     */
    hidePopup() {
        if (!this.componentRef || this.isPopupDestroyed) {
            return;
        }
        this.componentRef.instance.show = false;
        this.events.emit({
            type: "hide",
            position: this.popupPosition
        });
    }
    /**
     * Append created popup window to body
     *
     * @param {*} component
     * @memberof NgPasswordValidatorDirective
     */
    appendComponentToBody(component) {
        this.componentRef = this.componentFactoryResolver
            .resolveComponentFactory(component)
            .create(this.injector);
        this.componentRef.instance.data = {
            element: this.elementRef.nativeElement,
            elementPosition: this.popupPosition,
            options: this.options,
            defaultOptions
        };
        this.appRef.attachView(this.componentRef.hostView);
        const domElem = this.componentRef.hostView.rootNodes[0];
        document.body.appendChild(domElem);
        this.componentSubscribe = this.componentRef.instance.events.subscribe((event) => {
            this.handleEvents(event);
        });
    }
    /**
     * Reset/switching back to default options
     *
     * @param {NgPasswordValidatorOptions} defaultOption
     * @param {{ popup: SimpleChange }} options
     * @memberof NgPasswordValidatorDirective
     */
    applyOptionsDefault(options, defaultOption) {
        this.initOptions = Object.assign({}, this.initOptions || {}, options, defaultOption);
    }
    /**
     * Handle events
     *
     * @param {*} event
     * @memberof NgPasswordValidatorDirective
     */
    handleEvents(event) {
        if (event.type === "shown") {
            this.events.emit({
                type: "shown",
                position: this.popupPosition
            });
        }
    }
    /**
     * It creates popup window to show password requirement
     *
     * @memberof NgPasswordValidatorDirective
     */
    show() {
        if (!this.componentRef || this.isPopupDestroyed) {
            this.createPopup();
        }
        else if (!this.isPopupDestroyed) {
            this.showPopupElem();
        }
    }
    /**
     * Hide/Destroys popup windows
     *
     * @memberof NgPasswordValidatorDirective
     */
    hide() {
        this.destroyPopup();
    }
};
NgPasswordValidatorDirective.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [NgPasswordValidatorService,] }] },
    { type: ElementRef },
    { type: ComponentFactoryResolver },
    { type: ApplicationRef },
    { type: DataService },
    { type: Injector }
];
__decorate([
    Input("options")
], NgPasswordValidatorDirective.prototype, "optionsInput", null);
__decorate([
    Input("NgPasswordValidator")
], NgPasswordValidatorDirective.prototype, "popup", void 0);
__decorate([
    Input("placement")
], NgPasswordValidatorDirective.prototype, "placement", void 0);
__decorate([
    Input("z-index")
], NgPasswordValidatorDirective.prototype, "zIndex", void 0);
__decorate([
    Input("animation-duration")
], NgPasswordValidatorDirective.prototype, "animationDuration", void 0);
__decorate([
    Input("custom-class")
], NgPasswordValidatorDirective.prototype, "customClass", void 0);
__decorate([
    Input("shadow")
], NgPasswordValidatorDirective.prototype, "shadow", void 0);
__decorate([
    Input("theme")
], NgPasswordValidatorDirective.prototype, "theme", void 0);
__decorate([
    Input("offset")
], NgPasswordValidatorDirective.prototype, "offset", void 0);
__decorate([
    Input("width")
], NgPasswordValidatorDirective.prototype, "width", void 0);
__decorate([
    Input("max-width")
], NgPasswordValidatorDirective.prototype, "maxWidth", void 0);
__decorate([
    Input("position")
], NgPasswordValidatorDirective.prototype, "position", void 0);
__decorate([
    Input("heading")
], NgPasswordValidatorDirective.prototype, "heading", void 0);
__decorate([
    Input("successMessage")
], NgPasswordValidatorDirective.prototype, "successMessage", void 0);
__decorate([
    Output()
], NgPasswordValidatorDirective.prototype, "events", void 0);
__decorate([
    Output()
], NgPasswordValidatorDirective.prototype, "valid", void 0);
__decorate([
    HostListener("focusin", ["$event.target.value"])
], NgPasswordValidatorDirective.prototype, "onMouseEnter", null);
__decorate([
    HostListener("focusout")
], NgPasswordValidatorDirective.prototype, "onMouseLeave", null);
__decorate([
    HostListener("input", ["$event.target.value"])
], NgPasswordValidatorDirective.prototype, "onInput", null);
NgPasswordValidatorDirective = __decorate([
    Directive({
        selector: "[NgPasswordValidator]",
        exportAs: "NgPasswordValidator",
    }),
    __param(0, Optional()), __param(0, Inject(NgPasswordValidatorService))
], NgPasswordValidatorDirective);
export { NgPasswordValidatorDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctcGFzc3dvcmQtdmFsaWRhdG9yLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nLXBhc3N3b3JkLXZhbGlkYXRvci8iLCJzb3VyY2VzIjpbImxpYi9uZy1wYXNzd29yZC12YWxpZGF0b3IuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0gsY0FBYyxFQUNkLHdCQUF3QixFQUN4QixTQUFTLEVBQ1QsVUFBVSxFQUNWLGVBQWUsRUFDZixZQUFZLEVBQ1osWUFBWSxFQUNaLE1BQU0sRUFDTixRQUFRLEVBQ1IsS0FBSyxFQUNMLFNBQVMsRUFDVCxTQUFTLEVBQ1QsUUFBUSxFQUNSLE1BQU0sRUFDTixZQUFZLEVBQ2YsTUFBTSxlQUFlLENBQUM7QUFHdkIsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzdDLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBRWpGLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQzdFLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFjM0MsSUFBYSw0QkFBNEIsR0FBekMsTUFBYSw0QkFBNEI7SUFxQ3JDLFlBQzRELFdBQVcsRUFDM0QsVUFBc0IsRUFDdEIsd0JBQWtELEVBQ2xELE1BQXNCLEVBQ3RCLFdBQXdCLEVBQ3hCLFFBQWtCO1FBTDhCLGdCQUFXLEdBQVgsV0FBVyxDQUFBO1FBQzNELGVBQVUsR0FBVixVQUFVLENBQVk7UUFDdEIsNkJBQXdCLEdBQXhCLHdCQUF3QixDQUEwQjtRQUNsRCxXQUFNLEdBQU4sTUFBTSxDQUFnQjtRQUN0QixnQkFBVyxHQUFYLFdBQVcsQ0FBYTtRQUN4QixhQUFRLEdBQVIsUUFBUSxDQUFVO1FBMUM5QixvQkFBZSxHQUFHLFVBQVUsQ0FBQztRQUM3QixzQkFBaUIsR0FBRyxtQkFBbUIsQ0FBQztRQUN4QyxzQkFBaUIsR0FBRyxtQkFBbUIsQ0FBQztRQUN4QyxzQkFBaUIsR0FBRyxtQkFBbUIsQ0FBQztRQUN4QywrQkFBMEIsR0FBRywwQ0FBMEMsQ0FBQztRQUV4RSxZQUFPLEdBQUcsS0FBSyxDQUFDO1FBQ2hCLGVBQVUsR0FBRyxFQUFFLENBQUM7UUEwQk4sV0FBTSxHQUFzQixJQUFJLFlBQVksRUFBTyxDQUFDO1FBQ3BELFVBQUssR0FBMEIsSUFBSSxZQUFZLEVBQUUsQ0FBQztJQVM1RCxDQUFDO0lBOUJpQixJQUFJLFlBQVksQ0FBQyxLQUFpQztRQUNoRSxJQUFJLEtBQUssSUFBSSxjQUFjLEVBQUU7WUFDekIsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLGNBQWMsRUFBRSxLQUFLLENBQUMsQ0FBQztZQUM3RCxJQUFJLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztTQUM5QjtJQUNMLENBQUM7SUEyQkQsSUFBSSxPQUFPO1FBQ1AsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDO0lBQ2hDLENBQUM7SUFFRCxJQUFJLGdCQUFnQjtRQUNoQixPQUFPLElBQUksQ0FBQyxZQUFZLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDO0lBQ3JFLENBQUM7SUFFRDs7Ozs7O09BTUc7SUFDSCxJQUFJLGFBQWE7UUFDYixJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLEVBQUU7WUFDMUIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1NBQ25DO2FBQU07WUFDSCxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUM7U0FDL0I7SUFDTCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUVILFlBQVksQ0FBQyxLQUFVO1FBQ25CLElBQUksQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO1FBQzdCLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNaLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDOUIsQ0FBQztJQUNEOzs7O09BSUc7SUFDSCxxQkFBcUI7UUFDakIsSUFBSSxJQUFJLENBQUMsS0FBSyxJQUFJLGNBQWMsRUFBRTtZQUM5QixJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsY0FBYyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNsRSxJQUFJLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztTQUM5QjtJQUNMLENBQUM7SUFFRDs7OztPQUlHO0lBRUgsWUFBWTtRQUNSLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUNwQixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUVEOzs7OztPQUtHO0lBRUgsT0FBTyxDQUFDLEtBQWE7UUFDakIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM5QixDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSCxXQUFXLENBQUMsT0FBZ0M7UUFDeEMsTUFBTSxjQUFjLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNuRCxJQUFJLENBQUMsbUJBQW1CLENBQUMsY0FBYyxFQUFFLGNBQWMsQ0FBQyxDQUFDO0lBQzdELENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsV0FBVztRQUNQLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUNwQixJQUFJLElBQUksQ0FBQyxrQkFBa0IsRUFBRTtZQUN6QixJQUFJLENBQUMsa0JBQWtCLENBQUMsV0FBVyxFQUFFLENBQUM7U0FDekM7SUFDTCxDQUFDO0lBRUQ7Ozs7Ozs7T0FPRztJQUNILFNBQVMsQ0FBQyxNQUFrQyxFQUFFLE1BQWtDO1FBQzVFLG1IQUFtSDtRQUNuSCxLQUFLLE1BQU0sR0FBRyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDbkMsSUFBSSxNQUFNLENBQUMsR0FBRyxDQUFDLFlBQVksTUFBTSxFQUFFO2dCQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFBRTtTQUMvRztRQUVELHNDQUFzQztRQUN0QyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sSUFBSSxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFFcEMsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxtQkFBbUI7UUFDZixJQUFJLElBQUksQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRTtZQUNyQyxRQUFRLElBQUksQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDLElBQUksRUFBRTtnQkFDakQsS0FBSyxRQUFRO29CQUNULElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxNQUFNLENBQUMsUUFBUSxJQUFJLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQyxNQUFNLElBQUksQ0FBQyxDQUFDO29CQUM3RixNQUFNO2dCQUVWLEtBQUssT0FBTztvQkFDUixJQUFJLENBQUMsZUFBZTt3QkFDaEIsSUFBSSxNQUFNLENBQUMsUUFBUSxJQUFJLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQyxHQUFHLElBQUksSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQzthQUM1SDtTQUNKO0lBQ0wsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0gsYUFBYSxDQUFDLFVBQWtCO1FBQzVCLE1BQU0sSUFBSSxHQUFHO1lBQ1QsUUFBUSxFQUFFLFVBQVUsSUFBSSxVQUFVLENBQUMsTUFBTSxJQUFJLFVBQVUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUs7WUFDbEcsZ0JBQWdCLEVBQUUsVUFBVSxJQUFJLFVBQVUsQ0FBQyxNQUFNLElBQUksVUFBVSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsMEJBQTBCLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLO1lBQ3JILGdCQUFnQixFQUFFLFVBQVUsSUFBSSxVQUFVLENBQUMsTUFBTSxJQUFJLFVBQVUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSztZQUM1Ryw4QkFBOEIsRUFBRSxVQUFVLElBQUksVUFBVSxDQUFDLE1BQU0sSUFBSSxVQUFVLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUs7WUFDMUgsOEJBQThCLEVBQUUsVUFBVSxJQUFJLFVBQVUsQ0FBQyxNQUFNLElBQUksVUFBVSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLO1NBQzdILENBQUM7UUFFRixLQUFLLE1BQU0sUUFBUSxJQUFJLElBQUksQ0FBQyxlQUFlLENBQUMsS0FBSyxFQUFFO1lBQy9DLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsRUFBRTtnQkFDdkMsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7YUFDekI7U0FDSjtRQUNELElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxLQUFjLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3BFLElBQUksQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7SUFFRDs7Ozs7O09BTUc7SUFDSCxhQUFhLENBQUMsT0FBZ0M7UUFDMUMsTUFBTSxtQkFBbUIsR0FBUSxFQUFFLENBQUM7UUFDcEMsSUFBSSxnQkFBZ0IsR0FBUSxFQUFFLENBQUM7UUFDL0IsSUFBSSxhQUFhLEdBQVEsRUFBRSxDQUFDO1FBRTVCLGtDQUFrQztRQUNsQyxLQUFLLE1BQU0sSUFBSSxJQUFJLE9BQU8sRUFBRTtZQUN4QixJQUFJLElBQUksS0FBSyxTQUFTLEVBQUU7Z0JBQ3BCLG1CQUFtQixDQUFDLElBQUksQ0FBQyxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxZQUFZLENBQUM7YUFDMUQ7WUFDRCxJQUFJLElBQUksS0FBSyxTQUFTLEVBQUU7Z0JBQ3BCLGdCQUFnQixHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxZQUFZLENBQUM7YUFDakQ7U0FDSjtRQUVELGFBQWEsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxnQkFBZ0IsRUFBRSxtQkFBbUIsQ0FBQyxDQUFDO1FBRXpFLE9BQU8sYUFBYSxDQUFDO0lBQ3pCLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsa0JBQWtCO1FBQ2QsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO0lBQ2pGLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsV0FBVztRQUNQLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO1FBQzFCLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDO1FBQ3pELElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUN6QixDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSCxZQUFZO1FBQ1IsSUFBSSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRTtZQUN4QixJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7WUFFakIsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLElBQUksSUFBSSxDQUFDLGdCQUFnQixFQUFFO2dCQUM3QyxPQUFPO2FBQ1Y7WUFFRCxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ25ELElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDNUIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUM7Z0JBQ2IsSUFBSSxFQUFFLFFBQVE7Z0JBQ2QsUUFBUSxFQUFFLElBQUksQ0FBQyxhQUFhO2FBQy9CLENBQUMsQ0FBQztTQUNOO0lBQ0wsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxhQUFhO1FBQ1IsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUEwQixDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDMUQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUM7WUFDYixJQUFJLEVBQUUsTUFBTTtZQUNaLFFBQVEsRUFBRSxJQUFJLENBQUMsYUFBYTtTQUMvQixDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSCxTQUFTO1FBQ0wsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLElBQUksSUFBSSxDQUFDLGdCQUFnQixFQUFFO1lBQzdDLE9BQU87U0FDVjtRQUNBLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBMEIsQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDO1FBQzNELElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDO1lBQ2IsSUFBSSxFQUFFLE1BQU07WUFDWixRQUFRLEVBQUUsSUFBSSxDQUFDLGFBQWE7U0FDL0IsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0gscUJBQXFCLENBQUMsU0FBYztRQUNoQyxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyx3QkFBd0I7YUFDNUMsdUJBQXVCLENBQUMsU0FBUyxDQUFDO2FBQ2xDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDMUIsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUEwQixDQUFDLElBQUksR0FBRztZQUNqRCxPQUFPLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhO1lBQ3RDLGVBQWUsRUFBRSxJQUFJLENBQUMsYUFBYTtZQUNuQyxPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU87WUFDckIsY0FBYztTQUNqQixDQUFDO1FBRUYsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNuRCxNQUFNLE9BQU8sR0FBSSxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQWlDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBZ0IsQ0FBQztRQUNqRyxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUVuQyxJQUFJLENBQUMsa0JBQWtCLEdBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUEwQixDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxLQUFVLEVBQUUsRUFBRTtZQUNwRyxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzdCLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVEOzs7Ozs7T0FNRztJQUNILG1CQUFtQixDQUFDLE9BQWdDLEVBQUUsYUFBeUM7UUFDM0YsSUFBSSxDQUFDLFdBQVcsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsV0FBVyxJQUFJLEVBQUUsRUFBRSxPQUFPLEVBQUUsYUFBYSxDQUFDLENBQUM7SUFDekYsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0gsWUFBWSxDQUFDLEtBQVU7UUFDbkIsSUFBSSxLQUFLLENBQUMsSUFBSSxLQUFLLE9BQU8sRUFBRTtZQUN4QixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQztnQkFDYixJQUFJLEVBQUUsT0FBTztnQkFDYixRQUFRLEVBQUUsSUFBSSxDQUFDLGFBQWE7YUFDL0IsQ0FBQyxDQUFDO1NBQ047SUFDTCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILElBQUk7UUFDQSxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksSUFBSSxJQUFJLENBQUMsZ0JBQWdCLEVBQUU7WUFDN0MsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1NBQ3RCO2FBQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRTtZQUMvQixJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7U0FDeEI7SUFDTCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILElBQUk7UUFDQSxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDeEIsQ0FBQztDQUNKLENBQUE7OzRDQS9VUSxRQUFRLFlBQUksTUFBTSxTQUFDLDBCQUEwQjtZQUMxQixVQUFVO1lBQ0ksd0JBQXdCO1lBQzFDLGNBQWM7WUFDVCxXQUFXO1lBQ2QsUUFBUTs7QUE3Qlo7SUFBakIsS0FBSyxDQUFDLFNBQVMsQ0FBQztnRUFLaEI7QUFDNkI7SUFBN0IsS0FBSyxDQUFDLHFCQUFxQixDQUFDOzJEQUFtQztBQUM1QztJQUFuQixLQUFLLENBQUMsV0FBVyxDQUFDOytEQUFtQjtBQUNwQjtJQUFqQixLQUFLLENBQUMsU0FBUyxDQUFDOzREQUFnQjtBQUNKO0lBQTVCLEtBQUssQ0FBQyxvQkFBb0IsQ0FBQzt1RUFBMkI7QUFDaEM7SUFBdEIsS0FBSyxDQUFDLGNBQWMsQ0FBQztpRUFBcUI7QUFDMUI7SUFBaEIsS0FBSyxDQUFDLFFBQVEsQ0FBQzs0REFBaUI7QUFDakI7SUFBZixLQUFLLENBQUMsT0FBTyxDQUFDOzJEQUF3QjtBQUN0QjtJQUFoQixLQUFLLENBQUMsUUFBUSxDQUFDOzREQUFnQjtBQUNoQjtJQUFmLEtBQUssQ0FBQyxPQUFPLENBQUM7MkRBQWU7QUFDVjtJQUFuQixLQUFLLENBQUMsV0FBVyxDQUFDOzhEQUFrQjtBQUNsQjtJQUFsQixLQUFLLENBQUMsVUFBVSxDQUFDOzhEQUFxQjtBQUNyQjtJQUFqQixLQUFLLENBQUMsU0FBUyxDQUFDOzZEQUFpQjtBQUNUO0lBQXhCLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQztvRUFBd0I7QUFFdEM7SUFBVCxNQUFNLEVBQUU7NERBQXFEO0FBQ3BEO0lBQVQsTUFBTSxFQUFFOzJEQUFtRDtBQXdDNUQ7SUFEQyxZQUFZLENBQUMsU0FBUyxFQUFFLENBQUMscUJBQXFCLENBQUMsQ0FBQztnRUFLaEQ7QUFtQkQ7SUFEQyxZQUFZLENBQUMsVUFBVSxDQUFDO2dFQUl4QjtBQVNEO0lBREMsWUFBWSxDQUFDLE9BQU8sRUFBRSxDQUFDLHFCQUFxQixDQUFDLENBQUM7MkRBRzlDO0FBaEhRLDRCQUE0QjtJQUx4QyxTQUFTLENBQUM7UUFDUCxRQUFRLEVBQUUsdUJBQXVCO1FBQ2pDLFFBQVEsRUFBRSxxQkFBcUI7S0FDbEMsQ0FBQztJQXdDTyxXQUFBLFFBQVEsRUFBRSxDQUFBLEVBQUUsV0FBQSxNQUFNLENBQUMsMEJBQTBCLENBQUMsQ0FBQTtHQXRDMUMsNEJBQTRCLENBcVh4QztTQXJYWSw0QkFBNEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIEFwcGxpY2F0aW9uUmVmLFxuICAgIENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcixcbiAgICBEaXJlY3RpdmUsXG4gICAgRWxlbWVudFJlZixcbiAgICBFbWJlZGRlZFZpZXdSZWYsXG4gICAgRXZlbnRFbWl0dGVyLFxuICAgIEhvc3RMaXN0ZW5lcixcbiAgICBJbmplY3QsXG4gICAgSW5qZWN0b3IsXG4gICAgSW5wdXQsXG4gICAgT25DaGFuZ2VzLFxuICAgIE9uRGVzdHJveSxcbiAgICBPcHRpb25hbCxcbiAgICBPdXRwdXQsXG4gICAgU2ltcGxlQ2hhbmdlXG59IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tIFwicnhqc1wiO1xuXG5pbXBvcnQgeyBEYXRhU2VydmljZSB9IGZyb20gXCIuL2RhdGEuc2VydmljZVwiO1xuaW1wb3J0IHsgTmdQYXNzd29yZFZhbGlkYXRvckNvbXBvbmVudCB9IGZyb20gXCIuL25nLXBhc3N3b3JkLXZhbGlkYXRvci5jb21wb25lbnRcIjtcbmltcG9ydCB7IElFbGVtZW50UG9zaXRpb24sIElQb3NpdGlvbiwgTmdQYXNzd29yZFZhbGlkYXRvck9wdGlvbnMgfSBmcm9tIFwiLi9uZy1wYXNzd29yZC12YWxpZGF0b3IuaW50ZXJmYWNlXCI7XG5pbXBvcnQgeyBOZ1Bhc3N3b3JkVmFsaWRhdG9yU2VydmljZSB9IGZyb20gXCIuL25nLXBhc3N3b3JkLXZhbGlkYXRvci5zZXJ2aWNlXCI7XG5pbXBvcnQgeyBkZWZhdWx0T3B0aW9ucyB9IGZyb20gXCIuL29wdGlvbnNcIjtcblxuZXhwb3J0IGludGVyZmFjZSBIb3N0Q29tcG9uZW50IHtcbiAgICBkYXRhOiBhbnk7XG4gICAgc2hvdzogYm9vbGVhbjtcbiAgICBjbG9zZTogYm9vbGVhbjtcbiAgICBldmVudHM6IGFueTtcbn1cblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6IFwiW05nUGFzc3dvcmRWYWxpZGF0b3JdXCIsXG4gICAgZXhwb3J0QXM6IFwiTmdQYXNzd29yZFZhbGlkYXRvclwiLFxufSlcblxuZXhwb3J0IGNsYXNzIE5nUGFzc3dvcmRWYWxpZGF0b3JEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkRlc3Ryb3ksIE9uQ2hhbmdlcyB7XG4gICAgcmVnRXhwRm9yTGVuZ3RoID0gL14oLil7OH0kLztcbiAgICByZWdFeHBGb3JPbmVVcHBlciA9IC9eKD89LipbQS1aXSkoLiopJC87XG4gICAgcmVnRXhwRm9yT25lTG93ZXIgPSAvXig/PS4qW2Etel0pKC4qKSQvO1xuICAgIHJlZ0V4cEZvck9uZURpZ2l0ID0gL14oPz0uKlswLTldKSguKikkLztcbiAgICByZWdFeHBGb3JTcGVjaWFsQ2hhcmFjdGVycyA9IC9eKD89LipbIUAjJCVeJipdKShbYS16QS1aMC05IUAjJCVeJipdKikkLztcblxuICAgIGlzVmFsaWQgPSBmYWxzZTtcbiAgICBpbnB1dFZhbHVlID0gXCJcIjtcbiAgICBjb21wb25lbnRSZWY6IGFueTtcbiAgICBlbGVtZW50UG9zaXRpb246IElFbGVtZW50UG9zaXRpb247XG4gICAgcGFzc3dvcmRPcHRpb25zOiBOZ1Bhc3N3b3JkVmFsaWRhdG9yT3B0aW9ucztcbiAgICBjb21wb25lbnRTdWJzY3JpYmU6IFN1YnNjcmlwdGlvbjtcblxuICAgIEBJbnB1dChcIm9wdGlvbnNcIikgc2V0IG9wdGlvbnNJbnB1dCh2YWx1ZTogTmdQYXNzd29yZFZhbGlkYXRvck9wdGlvbnMpIHtcbiAgICAgICAgaWYgKHZhbHVlICYmIGRlZmF1bHRPcHRpb25zKSB7XG4gICAgICAgICAgICB0aGlzLnBhc3N3b3JkT3B0aW9ucyA9IHRoaXMuZGVlcE1lcmdlKGRlZmF1bHRPcHRpb25zLCB2YWx1ZSk7XG4gICAgICAgICAgICB0aGlzLmNyZWF0ZVBhc3N3b3JkUmVnZXgoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBASW5wdXQoXCJOZ1Bhc3N3b3JkVmFsaWRhdG9yXCIpIHBvcHVwOiBOZ1Bhc3N3b3JkVmFsaWRhdG9yT3B0aW9ucztcbiAgICBASW5wdXQoXCJwbGFjZW1lbnRcIikgcGxhY2VtZW50OiBzdHJpbmc7XG4gICAgQElucHV0KFwiei1pbmRleFwiKSB6SW5kZXg6IG51bWJlcjtcbiAgICBASW5wdXQoXCJhbmltYXRpb24tZHVyYXRpb25cIikgYW5pbWF0aW9uRHVyYXRpb246IG51bWJlcjtcbiAgICBASW5wdXQoXCJjdXN0b20tY2xhc3NcIikgY3VzdG9tQ2xhc3M6IHN0cmluZztcbiAgICBASW5wdXQoXCJzaGFkb3dcIikgc2hhZG93OiBib29sZWFuO1xuICAgIEBJbnB1dChcInRoZW1lXCIpIHRoZW1lOiBcImJhc2ljXCIgfCBcInByb1wiO1xuICAgIEBJbnB1dChcIm9mZnNldFwiKSBvZmZzZXQ6IG51bWJlcjtcbiAgICBASW5wdXQoXCJ3aWR0aFwiKSB3aWR0aDogbnVtYmVyO1xuICAgIEBJbnB1dChcIm1heC13aWR0aFwiKSBtYXhXaWR0aDogbnVtYmVyO1xuICAgIEBJbnB1dChcInBvc2l0aW9uXCIpIHBvc2l0aW9uOiBJUG9zaXRpb247XG4gICAgQElucHV0KFwiaGVhZGluZ1wiKSBoZWFkaW5nOiBzdHJpbmc7XG4gICAgQElucHV0KFwic3VjY2Vzc01lc3NhZ2VcIikgc3VjY2Vzc01lc3NhZ2U6IHN0cmluZztcblxuICAgIEBPdXRwdXQoKSBldmVudHM6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG4gICAgQE91dHB1dCgpIHZhbGlkOiBFdmVudEVtaXR0ZXI8Ym9vbGVhbj4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgQE9wdGlvbmFsKCkgQEluamVjdChOZ1Bhc3N3b3JkVmFsaWRhdG9yU2VydmljZSkgcHJpdmF0ZSBpbml0T3B0aW9ucyxcbiAgICAgICAgcHJpdmF0ZSBlbGVtZW50UmVmOiBFbGVtZW50UmVmLFxuICAgICAgICBwcml2YXRlIGNvbXBvbmVudEZhY3RvcnlSZXNvbHZlcjogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLFxuICAgICAgICBwcml2YXRlIGFwcFJlZjogQXBwbGljYXRpb25SZWYsXG4gICAgICAgIHByaXZhdGUgZGF0YVNlcnZpY2U6IERhdGFTZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIGluamVjdG9yOiBJbmplY3Rvcikge1xuICAgIH1cblxuICAgIGdldCBvcHRpb25zKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wYXNzd29yZE9wdGlvbnM7XG4gICAgfVxuXG4gICAgZ2V0IGlzUG9wdXBEZXN0cm95ZWQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBvbmVudFJlZiAmJiB0aGlzLmNvbXBvbmVudFJlZi5ob3N0Vmlldy5kZXN0cm95ZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IHBvcHVwIHBvc2l0aW9uXG4gICAgICpcbiAgICAgKiBAcmVhZG9ubHlcbiAgICAgKiBAdHlwZSB7KElFbGVtZW50UG9zaXRpb24gfCBJUG9zaXRpb24pfVxuICAgICAqIEBtZW1iZXJvZiBOZ1Bhc3N3b3JkVmFsaWRhdG9yRGlyZWN0aXZlXG4gICAgICovXG4gICAgZ2V0IHBvcHVwUG9zaXRpb24oKTogSUVsZW1lbnRQb3NpdGlvbiB8IElQb3NpdGlvbiB7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnNbXCJwb3NpdGlvblwiXSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9uc1tcInBvc2l0aW9uXCJdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudFBvc2l0aW9uO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRm9jdXMgaW4gaW5wdXQgZmllbGRcbiAgICAgKlxuICAgICAqIEBtZW1iZXJvZiBOZ1Bhc3N3b3JkVmFsaWRhdG9yRGlyZWN0aXZlXG4gICAgICovXG4gICAgQEhvc3RMaXN0ZW5lcihcImZvY3VzaW5cIiwgW1wiJGV2ZW50LnRhcmdldC52YWx1ZVwiXSlcbiAgICBvbk1vdXNlRW50ZXIodmFsdWU6IGFueSk6IHZvaWQge1xuICAgICAgICB0aGlzLnVwZGF0ZVBhc3N3b3JkT3B0aW9ucygpO1xuICAgICAgICB0aGlzLnNob3coKTtcbiAgICAgICAgdGhpcy5jaGVja1Bhc3N3b3JkKHZhbHVlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVXBkYXRlIHBhc3N3b3JkIG9wdGlvbnNcbiAgICAgKlxuICAgICAqIEBtZW1iZXJvZiBOZ1Bhc3N3b3JkVmFsaWRhdG9yRGlyZWN0aXZlXG4gICAgICovXG4gICAgdXBkYXRlUGFzc3dvcmRPcHRpb25zKCk6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5wb3B1cCAmJiBkZWZhdWx0T3B0aW9ucykge1xuICAgICAgICAgICAgdGhpcy5wYXNzd29yZE9wdGlvbnMgPSB0aGlzLmRlZXBNZXJnZShkZWZhdWx0T3B0aW9ucywgdGhpcy5wb3B1cCk7XG4gICAgICAgICAgICB0aGlzLmNyZWF0ZVBhc3N3b3JkUmVnZXgoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZvY3VzIG91dCBvZiBpbnB1dCBmaWVsZFxuICAgICAqXG4gICAgICogQG1lbWJlcm9mIE5nUGFzc3dvcmRWYWxpZGF0b3JEaXJlY3RpdmVcbiAgICAgKi9cbiAgICBASG9zdExpc3RlbmVyKFwiZm9jdXNvdXRcIilcbiAgICBvbk1vdXNlTGVhdmUoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuZGVzdHJveVBvcHVwKCk7XG4gICAgICAgIHRoaXMudmFsaWQuZW1pdCh0aGlzLmlzVmFsaWQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIElucHV0IGZpZWxkIHZhbHVlXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAgICAgKiBAbWVtYmVyb2YgTmdQYXNzd29yZFZhbGlkYXRvckRpcmVjdGl2ZVxuICAgICAqL1xuICAgIEBIb3N0TGlzdGVuZXIoXCJpbnB1dFwiLCBbXCIkZXZlbnQudGFyZ2V0LnZhbHVlXCJdKVxuICAgIG9uSW5wdXQodmFsdWU6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICB0aGlzLmNoZWNrUGFzc3dvcmQodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE9uIGlucHV0IGNoYW5nZVxuICAgICAqXG4gICAgICogQHBhcmFtIHt7IHBvcHVwOiBTaW1wbGVDaGFuZ2UgfX0gY2hhbmdlc1xuICAgICAqIEBtZW1iZXJvZiBOZ1Bhc3N3b3JkVmFsaWRhdG9yRGlyZWN0aXZlXG4gICAgICovXG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogeyBwb3B1cDogU2ltcGxlQ2hhbmdlIH0pOiB2b2lkIHtcbiAgICAgICAgY29uc3QgY2hhbmdlZE9wdGlvbnMgPSB0aGlzLmdldFByb3BlcnRpZXMoY2hhbmdlcyk7XG4gICAgICAgIHRoaXMuYXBwbHlPcHRpb25zRGVmYXVsdChjaGFuZ2VkT3B0aW9ucywgZGVmYXVsdE9wdGlvbnMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlc3Ryb3kgdGhlIHBvcCB1cCBhbmQgdW5zdWJzY3JpYmUgdG8gcmVsZWFzZSB0aGUgbWVtb3J5XG4gICAgICpcbiAgICAgKiBAbWVtYmVyb2YgTmdQYXNzd29yZFZhbGlkYXRvckRpcmVjdGl2ZVxuICAgICAqL1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgICAgICB0aGlzLmRlc3Ryb3lQb3B1cCgpO1xuICAgICAgICBpZiAodGhpcy5jb21wb25lbnRTdWJzY3JpYmUpIHtcbiAgICAgICAgICAgIHRoaXMuY29tcG9uZW50U3Vic2NyaWJlLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZWVwIG1lcmdlIG9iamVjdHNcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7TmdQYXNzd29yZFZhbGlkYXRvck9wdGlvbnN9IHRhcmdldFxuICAgICAqIEBwYXJhbSB7TmdQYXNzd29yZFZhbGlkYXRvck9wdGlvbnN9IHNvdXJjZVxuICAgICAqIEByZXR1cm5zIHtOZ1Bhc3N3b3JkVmFsaWRhdG9yT3B0aW9uc31cbiAgICAgKiBAbWVtYmVyb2YgTmdQYXNzd29yZFZhbGlkYXRvckRpcmVjdGl2ZVxuICAgICAqL1xuICAgIGRlZXBNZXJnZSh0YXJnZXQ6IE5nUGFzc3dvcmRWYWxpZGF0b3JPcHRpb25zLCBzb3VyY2U6IE5nUGFzc3dvcmRWYWxpZGF0b3JPcHRpb25zKTogTmdQYXNzd29yZFZhbGlkYXRvck9wdGlvbnMge1xuICAgICAgICAvLyBJdGVyYXRlIHRocm91Z2ggYHNvdXJjZWAgcHJvcGVydGllcyBhbmQgaWYgYW4gYE9iamVjdGAgc2V0IHByb3BlcnR5IHRvIG1lcmdlIG9mIGB0YXJnZXRgIGFuZCBgc291cmNlYCBwcm9wZXJ0aWVzXG4gICAgICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHNvdXJjZSkpIHtcbiAgICAgICAgICAgIGlmIChzb3VyY2Vba2V5XSBpbnN0YW5jZW9mIE9iamVjdCkgeyBPYmplY3QuYXNzaWduKHNvdXJjZVtrZXldLCB0aGlzLmRlZXBNZXJnZSh0YXJnZXRba2V5XSwgc291cmNlW2tleV0pKTsgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gSm9pbiBgdGFyZ2V0YCBhbmQgbW9kaWZpZWQgYHNvdXJjZWBcbiAgICAgICAgT2JqZWN0LmFzc2lnbih0YXJnZXQgfHwge30sIHNvdXJjZSk7XG5cbiAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgcGFzc3dvcmQgcmVnZXhcbiAgICAgKlxuICAgICAqIEBtZW1iZXJvZiBOZ1Bhc3N3b3JkVmFsaWRhdG9yRGlyZWN0aXZlXG4gICAgICovXG4gICAgY3JlYXRlUGFzc3dvcmRSZWdleCgpOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMucGFzc3dvcmRPcHRpb25zLnJ1bGVzLnBhc3N3b3JkKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHRoaXMucGFzc3dvcmRPcHRpb25zLnJ1bGVzW1wicGFzc3dvcmRcIl0udHlwZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgXCJudW1iZXJcIjpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWdFeHBGb3JMZW5ndGggPSBuZXcgUmVnRXhwKGBeKC4peyR7dGhpcy5wYXNzd29yZE9wdGlvbnMucnVsZXNbXCJwYXNzd29yZFwiXS5sZW5ndGh9fSRgKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlIFwicmFuZ2VcIjpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWdFeHBGb3JMZW5ndGggPVxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFJlZ0V4cChgXiguKXske3RoaXMucGFzc3dvcmRPcHRpb25zLnJ1bGVzW1wicGFzc3dvcmRcIl0ubWlufSwke3RoaXMucGFzc3dvcmRPcHRpb25zLnJ1bGVzW1wicGFzc3dvcmRcIl0ubWF4fX0kYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVjayBwYXNzd29yZCBpZiB2YWxpZCBvciBub3RcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dFZhbHVlXG4gICAgICogQG1lbWJlcm9mIE5nUGFzc3dvcmRWYWxpZGF0b3JEaXJlY3RpdmVcbiAgICAgKi9cbiAgICBjaGVja1Bhc3N3b3JkKGlucHV0VmFsdWU6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICBjb25zdCBkYXRhID0ge1xuICAgICAgICAgICAgcGFzc3dvcmQ6IGlucHV0VmFsdWUgJiYgaW5wdXRWYWx1ZS5sZW5ndGggJiYgaW5wdXRWYWx1ZS5tYXRjaCh0aGlzLnJlZ0V4cEZvckxlbmd0aCkgPyB0cnVlIDogZmFsc2UsXG4gICAgICAgICAgICBcImluY2x1ZGUtc3ltYm9sXCI6IGlucHV0VmFsdWUgJiYgaW5wdXRWYWx1ZS5sZW5ndGggJiYgaW5wdXRWYWx1ZS5tYXRjaCh0aGlzLnJlZ0V4cEZvclNwZWNpYWxDaGFyYWN0ZXJzKSA/IHRydWUgOiBmYWxzZSxcbiAgICAgICAgICAgIFwiaW5jbHVkZS1udW1iZXJcIjogaW5wdXRWYWx1ZSAmJiBpbnB1dFZhbHVlLmxlbmd0aCAmJiBpbnB1dFZhbHVlLm1hdGNoKHRoaXMucmVnRXhwRm9yT25lRGlnaXQpID8gdHJ1ZSA6IGZhbHNlLFxuICAgICAgICAgICAgXCJpbmNsdWRlLWxvd2VyY2FzZS1jaGFyYWN0ZXJzXCI6IGlucHV0VmFsdWUgJiYgaW5wdXRWYWx1ZS5sZW5ndGggJiYgaW5wdXRWYWx1ZS5tYXRjaCh0aGlzLnJlZ0V4cEZvck9uZUxvd2VyKSA/IHRydWUgOiBmYWxzZSxcbiAgICAgICAgICAgIFwiaW5jbHVkZS11cHBlcmNhc2UtY2hhcmFjdGVyc1wiOiBpbnB1dFZhbHVlICYmIGlucHV0VmFsdWUubGVuZ3RoICYmIGlucHV0VmFsdWUubWF0Y2godGhpcy5yZWdFeHBGb3JPbmVVcHBlcikgPyB0cnVlIDogZmFsc2UsXG4gICAgICAgIH07XG5cbiAgICAgICAgZm9yIChjb25zdCBwcm9wTmFtZSBpbiB0aGlzLnBhc3N3b3JkT3B0aW9ucy5ydWxlcykge1xuICAgICAgICAgICAgaWYgKCF0aGlzLnBhc3N3b3JkT3B0aW9ucy5ydWxlc1twcm9wTmFtZV0pIHtcbiAgICAgICAgICAgICAgICBkZWxldGUgZGF0YVtwcm9wTmFtZV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pc1ZhbGlkID0gT2JqZWN0LnZhbHVlcyhkYXRhKS5ldmVyeSgodmFsdWU6IGJvb2xlYW4pID0+IHZhbHVlKTtcbiAgICAgICAgdGhpcy5kYXRhU2VydmljZS51cGRhdGVWYWx1ZShkYXRhKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgcHJvcGVydGllc1xuICAgICAqXG4gICAgICogQHBhcmFtIHt7IHBvcHVwOiBTaW1wbGVDaGFuZ2UgfX0gY2hhbmdlc1xuICAgICAqIEByZXR1cm5zIHt7IHBvcHVwOiBhbnkgfX1cbiAgICAgKiBAbWVtYmVyb2YgTmdQYXNzd29yZFZhbGlkYXRvckRpcmVjdGl2ZVxuICAgICAqL1xuICAgIGdldFByb3BlcnRpZXMoY2hhbmdlczogeyBwb3B1cDogU2ltcGxlQ2hhbmdlIH0pOiB7IHBvcHVwOiBhbnkgfSB7XG4gICAgICAgIGNvbnN0IGRpcmVjdGl2ZVByb3BlcnRpZXM6IGFueSA9IHt9O1xuICAgICAgICBsZXQgY3VzdG9tUHJvcGVydGllczogYW55ID0ge307XG4gICAgICAgIGxldCBhbGxQcm9wZXJ0aWVzOiBhbnkgPSB7fTtcblxuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IGZvcmluXG4gICAgICAgIGZvciAoY29uc3QgcHJvcCBpbiBjaGFuZ2VzKSB7XG4gICAgICAgICAgICBpZiAocHJvcCAhPT0gXCJvcHRpb25zXCIpIHtcbiAgICAgICAgICAgICAgICBkaXJlY3RpdmVQcm9wZXJ0aWVzW3Byb3BdID0gY2hhbmdlc1twcm9wXS5jdXJyZW50VmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocHJvcCA9PT0gXCJvcHRpb25zXCIpIHtcbiAgICAgICAgICAgICAgICBjdXN0b21Qcm9wZXJ0aWVzID0gY2hhbmdlc1twcm9wXS5jdXJyZW50VmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBhbGxQcm9wZXJ0aWVzID0gT2JqZWN0LmFzc2lnbih7fSwgY3VzdG9tUHJvcGVydGllcywgZGlyZWN0aXZlUHJvcGVydGllcyk7XG5cbiAgICAgICAgcmV0dXJuIGFsbFByb3BlcnRpZXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IGVsZW1lbnQgcG9zaXRpb25cbiAgICAgKlxuICAgICAqIEBtZW1iZXJvZiBOZ1Bhc3N3b3JkVmFsaWRhdG9yRGlyZWN0aXZlXG4gICAgICovXG4gICAgZ2V0RWxlbWVudFBvc2l0aW9uKCk6IHZvaWQge1xuICAgICAgICB0aGlzLmVsZW1lbnRQb3NpdGlvbiA9IHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBQb3B1cFxuICAgICAqXG4gICAgICogQG1lbWJlcm9mIE5nUGFzc3dvcmRWYWxpZGF0b3JEaXJlY3RpdmVcbiAgICAgKi9cbiAgICBjcmVhdGVQb3B1cCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5nZXRFbGVtZW50UG9zaXRpb24oKTtcbiAgICAgICAgdGhpcy5hcHBlbmRDb21wb25lbnRUb0JvZHkoTmdQYXNzd29yZFZhbGlkYXRvckNvbXBvbmVudCk7XG4gICAgICAgIHRoaXMuc2hvd1BvcHVwRWxlbSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlc3Ryb3kgUG9wdXBcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHt2b2lkfVxuICAgICAqIEBtZW1iZXJvZiBOZ1Bhc3N3b3JkVmFsaWRhdG9yRGlyZWN0aXZlXG4gICAgICovXG4gICAgZGVzdHJveVBvcHVwKCk6IHZvaWQge1xuICAgICAgICBpZiAoIXRoaXMuaXNQb3B1cERlc3Ryb3llZCkge1xuICAgICAgICAgICAgdGhpcy5oaWRlUG9wdXAoKTtcblxuICAgICAgICAgICAgaWYgKCF0aGlzLmNvbXBvbmVudFJlZiB8fCB0aGlzLmlzUG9wdXBEZXN0cm95ZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuYXBwUmVmLmRldGFjaFZpZXcodGhpcy5jb21wb25lbnRSZWYuaG9zdFZpZXcpO1xuICAgICAgICAgICAgdGhpcy5jb21wb25lbnRSZWYuZGVzdHJveSgpO1xuICAgICAgICAgICAgdGhpcy5ldmVudHMuZW1pdCh7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJoaWRkZW5cIixcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogdGhpcy5wb3B1cFBvc2l0aW9uXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNob3cgcG9wdXAgd2luZG93XG4gICAgICpcbiAgICAgKiBAbWVtYmVyb2YgTmdQYXNzd29yZFZhbGlkYXRvckRpcmVjdGl2ZVxuICAgICAqL1xuICAgIHNob3dQb3B1cEVsZW0oKTogdm9pZCB7XG4gICAgICAgICh0aGlzLmNvbXBvbmVudFJlZi5pbnN0YW5jZSBhcyBIb3N0Q29tcG9uZW50KS5zaG93ID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5ldmVudHMuZW1pdCh7XG4gICAgICAgICAgICB0eXBlOiBcInNob3dcIixcbiAgICAgICAgICAgIHBvc2l0aW9uOiB0aGlzLnBvcHVwUG9zaXRpb25cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSGlkZSBwb3B1cCB3aW5kb3dcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHt2b2lkfVxuICAgICAqIEBtZW1iZXJvZiBOZ1Bhc3N3b3JkVmFsaWRhdG9yRGlyZWN0aXZlXG4gICAgICovXG4gICAgaGlkZVBvcHVwKCk6IHZvaWQge1xuICAgICAgICBpZiAoIXRoaXMuY29tcG9uZW50UmVmIHx8IHRoaXMuaXNQb3B1cERlc3Ryb3llZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgICh0aGlzLmNvbXBvbmVudFJlZi5pbnN0YW5jZSBhcyBIb3N0Q29tcG9uZW50KS5zaG93ID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZXZlbnRzLmVtaXQoe1xuICAgICAgICAgICAgdHlwZTogXCJoaWRlXCIsXG4gICAgICAgICAgICBwb3NpdGlvbjogdGhpcy5wb3B1cFBvc2l0aW9uXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFwcGVuZCBjcmVhdGVkIHBvcHVwIHdpbmRvdyB0byBib2R5XG4gICAgICpcbiAgICAgKiBAcGFyYW0geyp9IGNvbXBvbmVudFxuICAgICAqIEBtZW1iZXJvZiBOZ1Bhc3N3b3JkVmFsaWRhdG9yRGlyZWN0aXZlXG4gICAgICovXG4gICAgYXBwZW5kQ29tcG9uZW50VG9Cb2R5KGNvbXBvbmVudDogYW55KTogdm9pZCB7XG4gICAgICAgIHRoaXMuY29tcG9uZW50UmVmID0gdGhpcy5jb21wb25lbnRGYWN0b3J5UmVzb2x2ZXJcbiAgICAgICAgICAgIC5yZXNvbHZlQ29tcG9uZW50RmFjdG9yeShjb21wb25lbnQpXG4gICAgICAgICAgICAuY3JlYXRlKHRoaXMuaW5qZWN0b3IpO1xuICAgICAgICAodGhpcy5jb21wb25lbnRSZWYuaW5zdGFuY2UgYXMgSG9zdENvbXBvbmVudCkuZGF0YSA9IHtcbiAgICAgICAgICAgIGVsZW1lbnQ6IHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LFxuICAgICAgICAgICAgZWxlbWVudFBvc2l0aW9uOiB0aGlzLnBvcHVwUG9zaXRpb24sXG4gICAgICAgICAgICBvcHRpb25zOiB0aGlzLm9wdGlvbnMsXG4gICAgICAgICAgICBkZWZhdWx0T3B0aW9uc1xuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuYXBwUmVmLmF0dGFjaFZpZXcodGhpcy5jb21wb25lbnRSZWYuaG9zdFZpZXcpO1xuICAgICAgICBjb25zdCBkb21FbGVtID0gKHRoaXMuY29tcG9uZW50UmVmLmhvc3RWaWV3IGFzIEVtYmVkZGVkVmlld1JlZjxhbnk+KS5yb290Tm9kZXNbMF0gYXMgSFRNTEVsZW1lbnQ7XG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZG9tRWxlbSk7XG5cbiAgICAgICAgdGhpcy5jb21wb25lbnRTdWJzY3JpYmUgPSAodGhpcy5jb21wb25lbnRSZWYuaW5zdGFuY2UgYXMgSG9zdENvbXBvbmVudCkuZXZlbnRzLnN1YnNjcmliZSgoZXZlbnQ6IGFueSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5oYW5kbGVFdmVudHMoZXZlbnQpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXNldC9zd2l0Y2hpbmcgYmFjayB0byBkZWZhdWx0IG9wdGlvbnNcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7TmdQYXNzd29yZFZhbGlkYXRvck9wdGlvbnN9IGRlZmF1bHRPcHRpb25cbiAgICAgKiBAcGFyYW0ge3sgcG9wdXA6IFNpbXBsZUNoYW5nZSB9fSBvcHRpb25zXG4gICAgICogQG1lbWJlcm9mIE5nUGFzc3dvcmRWYWxpZGF0b3JEaXJlY3RpdmVcbiAgICAgKi9cbiAgICBhcHBseU9wdGlvbnNEZWZhdWx0KG9wdGlvbnM6IHsgcG9wdXA6IFNpbXBsZUNoYW5nZSB9LCBkZWZhdWx0T3B0aW9uOiBOZ1Bhc3N3b3JkVmFsaWRhdG9yT3B0aW9ucyk6IHZvaWQge1xuICAgICAgICB0aGlzLmluaXRPcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5pbml0T3B0aW9ucyB8fCB7fSwgb3B0aW9ucywgZGVmYXVsdE9wdGlvbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSGFuZGxlIGV2ZW50c1xuICAgICAqXG4gICAgICogQHBhcmFtIHsqfSBldmVudFxuICAgICAqIEBtZW1iZXJvZiBOZ1Bhc3N3b3JkVmFsaWRhdG9yRGlyZWN0aXZlXG4gICAgICovXG4gICAgaGFuZGxlRXZlbnRzKGV2ZW50OiBhbnkpOiB2b2lkIHtcbiAgICAgICAgaWYgKGV2ZW50LnR5cGUgPT09IFwic2hvd25cIikge1xuICAgICAgICAgICAgdGhpcy5ldmVudHMuZW1pdCh7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJzaG93blwiLFxuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiB0aGlzLnBvcHVwUG9zaXRpb25cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSXQgY3JlYXRlcyBwb3B1cCB3aW5kb3cgdG8gc2hvdyBwYXNzd29yZCByZXF1aXJlbWVudFxuICAgICAqXG4gICAgICogQG1lbWJlcm9mIE5nUGFzc3dvcmRWYWxpZGF0b3JEaXJlY3RpdmVcbiAgICAgKi9cbiAgICBzaG93KCk6IHZvaWQge1xuICAgICAgICBpZiAoIXRoaXMuY29tcG9uZW50UmVmIHx8IHRoaXMuaXNQb3B1cERlc3Ryb3llZCkge1xuICAgICAgICAgICAgdGhpcy5jcmVhdGVQb3B1cCgpO1xuICAgICAgICB9IGVsc2UgaWYgKCF0aGlzLmlzUG9wdXBEZXN0cm95ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuc2hvd1BvcHVwRWxlbSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSGlkZS9EZXN0cm95cyBwb3B1cCB3aW5kb3dzXG4gICAgICpcbiAgICAgKiBAbWVtYmVyb2YgTmdQYXNzd29yZFZhbGlkYXRvckRpcmVjdGl2ZVxuICAgICAqL1xuICAgIGhpZGUoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuZGVzdHJveVBvcHVwKCk7XG4gICAgfVxufVxuIl19