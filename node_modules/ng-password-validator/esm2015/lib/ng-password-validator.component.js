import { __decorate } from "tslib";
import { Component, ElementRef, EventEmitter, HostBinding, HostListener, Input, OnChanges, OnInit, Renderer2, SimpleChanges } from "@angular/core";
import { DataService } from "./data.service";
import { defaultOptions } from "./options";
let NgPasswordValidatorComponent = class NgPasswordValidatorComponent {
    constructor(elementRef, renderer, dataService) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.dataService = dataService;
        this.passwordStatus = {
            password: false,
            "include-symbol": false,
            "include-number": false,
            "include-lowercase-characters": false,
            "include-uppercase-characters": false,
        };
        this.isSecure = false;
        this.Show = false;
        this.events = new EventEmitter();
        this.passwordOptions = Object.assign({}, defaultOptions);
    }
    /**
     * Host listener transition end
     *
     * @memberof NgPasswordValidatorComponent
     */
    transitionEnd() {
        if (this.show) {
            this.events.emit({
                type: "shown"
            });
        }
    }
    set show(value) {
        if (value) {
            this.setPosition();
        }
        this.Show = this.hostClassShow = value;
    }
    get show() {
        return this.Show;
    }
    get placement() {
        return this.data.options.placement;
    }
    get element() {
        return this.data.element;
    }
    get elementPosition() {
        return this.data.elementPosition;
    }
    get options() {
        return this.data.options;
    }
    get popupOffset() {
        switch (this.data.options.offset) {
            case "":
                return defaultOptions.offset;
            case "0":
                return +this.data.options.offset;
            default:
                return +this.data.options.offset;
        }
    }
    get rules() {
        return Object.assign(Object.assign({}, this.data.defaultOptions.rules), this.data.options.rules);
    }
    get defaultOptions() {
        return this.data.defaultOptions;
    }
    /**
     * Component initialization
     *
     * @memberof NgPasswordValidatorComponent
     */
    ngOnInit() {
        this.setCustomClass();
        this.setStyles();
        this.setTheme();
        this.setCustomText();
        this.dataService.updatedValue.subscribe((data) => {
            this.passwordStatus = Object.assign(Object.assign({}, this.passwordStatus), data);
            for (const propName in this.passwordOptions.rules) {
                if (!this.passwordOptions.rules[propName]) {
                    delete this.passwordStatus[propName];
                }
            }
            this.isSecure = Object.values(this.passwordStatus).every((value) => value);
        });
    }
    ngOnChanges(changes) {
        if (changes && changes.data && changes.data.currentValue) {
            this.data = changes.data.currentValue;
        }
    }
    /**
     * Set popup window position
     *
     * @returns {void}
     * @memberof NgPasswordValidatorComponent
     */
    setPosition() {
        if (this.setHostStyle(this.placement)) {
            this.setPlacementClass(this.placement);
            return;
        }
        else {
            // Is popup outside the visible area
            const placements = ["top", "right", "bottom", "left"];
            let isPlacementSet;
            for (const placement of placements) {
                if (this.setHostStyle(placement)) {
                    this.setPlacementClass(placement);
                    isPlacementSet = true;
                    return;
                }
            }
            // Set original placement
            if (!isPlacementSet) {
                this.setHostStyle(this.placement);
                this.setPlacementClass(this.placement);
            }
        }
    }
    /**
     * Set popup placement class
     *
     * @param {string} placement
     * @memberof NgPasswordValidatorComponent
     */
    setPlacementClass(placement) {
        this.renderer.addClass(this.elementRef.nativeElement, "popup-" + placement);
    }
    /**
     * Set host element style
     *
     * @param {string} placement
     * @returns {boolean}
     * @memberof NgPasswordValidatorComponent
     */
    setHostStyle(placement) {
        const isSvg = this.element instanceof SVGElement;
        const popup = this.elementRef.nativeElement;
        const isCustomPosition = !this.elementPosition.right;
        let elementHeight = isSvg ? this.element.getBoundingClientRect().height : this.element.offsetHeight;
        let elementWidth = isSvg ? this.element.getBoundingClientRect().width : this.element.offsetWidth;
        const popupHeight = popup.clientHeight;
        const popupWidth = popup.clientWidth;
        const scrollY = window.pageYOffset;
        if (isCustomPosition) {
            elementHeight = 0;
            elementWidth = 0;
        }
        let topStyle;
        let leftStyle;
        switch (placement) {
            case "top":
                topStyle = (this.elementPosition.top + scrollY) - (popupHeight + this.popupOffset);
                leftStyle = this.elementPosition.left;
                break;
            case "bottom":
                topStyle = (this.elementPosition.top + scrollY) + elementHeight + this.popupOffset;
                leftStyle = this.elementPosition.left;
                break;
            case "left":
                leftStyle = this.elementPosition.left - popupWidth - this.popupOffset;
                topStyle = (this.elementPosition.top + scrollY);
                break;
            case "right":
                leftStyle = this.elementPosition.left + elementWidth + this.popupOffset;
                topStyle = (this.elementPosition.top + scrollY);
        }
        this.hostStyleTop = topStyle + "px";
        this.hostStyleLeft = leftStyle + "px";
        return true;
    }
    /**
     * Sets Z-index
     *
     * @memberof NgPasswordValidatorComponent
     */
    setZIndex() {
        if (this.options["z-index"] !== 0) {
            this.hostStyleZIndex = this.options["z-index"];
        }
    }
    /**
     * Ste custom class name
     *
     * @memberof NgPasswordValidatorComponent
     */
    setCustomClass() {
        if (this.options["customClass"]) {
            this.options["customClass"].split(" ").forEach((className) => {
                this.renderer.addClass(this.elementRef.nativeElement, className);
            });
        }
    }
    /**
     * Set theme
     *
     * @memberof NgPasswordValidatorComponent
     */
    setTheme() {
        if (this.options["theme"]) {
            this.renderer.addClass(this.elementRef.nativeElement, "popup-" + this.options["theme"]);
        }
    }
    setCustomText() {
        if (this.options["heading"]) {
            this.heading = this.options["heading"];
        }
        if (this.options["successMessage"]) {
            this.successMessage = this.options["successMessage"];
        }
    }
    /**
     * Sets the animation duration
     *
     * @memberof NgPasswordValidatorComponent
     */
    setAnimationDuration() {
        this.hostStyleTransition = "opacity " + this.options["animation-duration"] + "ms";
    }
    /**
     * Set popup window style
     *
     * @memberof NgPasswordValidatorComponent
     */
    setStyles() {
        this.setZIndex();
        this.setAnimationDuration();
        this.hostClassShadow = this.options["shadow"];
        this.hostStyleMaxWidth = this.options["max-width"] + "px";
        this.hostStyleWidth = this.options["width"] ? this.options["width"] + "px" : "";
    }
};
NgPasswordValidatorComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: DataService }
];
__decorate([
    Input()
], NgPasswordValidatorComponent.prototype, "data", void 0);
__decorate([
    HostBinding("style.top")
], NgPasswordValidatorComponent.prototype, "hostStyleTop", void 0);
__decorate([
    HostBinding("style.left")
], NgPasswordValidatorComponent.prototype, "hostStyleLeft", void 0);
__decorate([
    HostBinding("style.z-index")
], NgPasswordValidatorComponent.prototype, "hostStyleZIndex", void 0);
__decorate([
    HostBinding("style.transition")
], NgPasswordValidatorComponent.prototype, "hostStyleTransition", void 0);
__decorate([
    HostBinding("style.width")
], NgPasswordValidatorComponent.prototype, "hostStyleWidth", void 0);
__decorate([
    HostBinding("style.max-width")
], NgPasswordValidatorComponent.prototype, "hostStyleMaxWidth", void 0);
__decorate([
    HostBinding("style.pointer-events")
], NgPasswordValidatorComponent.prototype, "hostStylePointerEvents", void 0);
__decorate([
    HostBinding("class.popup-show")
], NgPasswordValidatorComponent.prototype, "hostClassShow", void 0);
__decorate([
    HostBinding("class.popup-shadow")
], NgPasswordValidatorComponent.prototype, "hostClassShadow", void 0);
__decorate([
    HostListener("transitionend", [""])
], NgPasswordValidatorComponent.prototype, "transitionEnd", null);
__decorate([
    Input()
], NgPasswordValidatorComponent.prototype, "show", null);
NgPasswordValidatorComponent = __decorate([
    Component({
        selector: "NgPasswordValidator",
        template: "<div class=\"popup-window\">\n    <div class=\"heading\">{{heading}}</div>\n    <div *ngIf=\"rules['password']\">\n        <div class=\"rule\" [hidden]=\"rules['password'].type !== 'number'\"\n            [ngClass]=\"{'rule-pass':passwordStatus['password']}\">\n            Password length should be {{rules['password'].length}} characters.\n        </div>\n        <div class=\"rule\" [hidden]=\"rules['password'].type !== 'range'\"\n            [ngClass]=\"{'rule-pass':passwordStatus['password']}\">\n            Password length should be {{rules['password'].min}} - {{rules['password'].max}}\n            characters.\n        </div>\n    </div>\n    <div class=\"rule\" [hidden]=\"!rules['include-symbol']\"\n        [ngClass]=\"{'rule-pass':passwordStatus['include-symbol']}\">\n        Include Symbols:( e.g. @#$% )\n    </div>\n    <div class=\"rule\" [hidden]=\"!rules['include-number']\"\n        [ngClass]=\"{'rule-pass':passwordStatus['include-number']}\">\n        Include Numbers:( e.g.123456 )\n    </div>\n    <div class=\"rule\" [hidden]=\"!rules['include-lowercase-characters']\"\n        [ngClass]=\"{'rule-pass':passwordStatus['include-lowercase-characters']}\">\n        Include Lowercase Characters:(e.g. abcdefgh )\n    </div>\n    <div class=\"rule\" [hidden]=\"!rules['include-uppercase-characters']\"\n        [ngClass]=\"{'rule-pass':passwordStatus['include-uppercase-characters']}\">\n        Include Uppercase Characters:(e.g. ABCDEFGH )\n    </div>\n    <div class=\"success-message\" [hidden]=\"!isSecure\">\n        {{successMessage}}\n    </div>\n</div>\n",
        host: { class: "popup" },
        styles: ["@charset \"UTF-8\";:host{max-width:390px;background-color:#fff;color:#000;text-align:left;border-radius:6px;position:absolute;pointer-events:none;padding:10px;z-index:1000;display:block;opacity:0;transition:opacity .3s ease-in-out;top:0;left:0}:host.popup-show{opacity:1}:host.popup-shadow{box-shadow:0 1px 5px 0 rgba(0,0,0,.4)}:host.popup .popup-window .heading{font-size:16px;color:#000;margin-bottom:.5rem;font-weight:700}:host.popup .popup-window .rule{font-size:14px;color:#6a6a6a;line-height:18px;margin:3px 0}:host.popup .popup-window .rule::before{content:\"\\a\";width:5px;height:5px;border-radius:50%;background:#6a6a6a;display:inline-block;vertical-align:sub;margin:0 10px 6px 0}:host.popup .popup-window .rule.rule-pass{text-decoration:line-through;color:#d3d3d3}:host.popup .popup-window .rule.rule-pass::before{background:#d3d3d3}:host.popup .popup-window .success-message{color:#28a745;text-align:center;font-size:16px;margin-top:5px}:host.popup.popup-pro .popup-window .rule.rule-pass{color:#28a745;text-decoration:none}:host.popup.popup-pro .popup-window .rule.rule-pass::before{content:\"\u2713\"!important;width:0;height:0;padding-right:5px;vertical-align:inherit;background:#28a745}:host.popup.popup-pro .popup-window .success-message{color:#9c0404}"]
    })
], NgPasswordValidatorComponent);
export { NgPasswordValidatorComponent };
//# sourceMappingURL=data:application/json;base64,