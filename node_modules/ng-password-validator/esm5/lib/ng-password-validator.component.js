import { __assign, __decorate, __values } from "tslib";
import { Component, ElementRef, EventEmitter, HostBinding, HostListener, Input, OnChanges, OnInit, Renderer2, SimpleChanges } from "@angular/core";
import { DataService } from "./data.service";
import { defaultOptions } from "./options";
var NgPasswordValidatorComponent = /** @class */ (function () {
    function NgPasswordValidatorComponent(elementRef, renderer, dataService) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.dataService = dataService;
        this.passwordStatus = {
            password: false,
            "include-symbol": false,
            "include-number": false,
            "include-lowercase-characters": false,
            "include-uppercase-characters": false,
        };
        this.isSecure = false;
        this.Show = false;
        this.events = new EventEmitter();
        this.passwordOptions = __assign({}, defaultOptions);
    }
    /**
     * Host listener transition end
     *
     * @memberof NgPasswordValidatorComponent
     */
    NgPasswordValidatorComponent.prototype.transitionEnd = function () {
        if (this.show) {
            this.events.emit({
                type: "shown"
            });
        }
    };
    Object.defineProperty(NgPasswordValidatorComponent.prototype, "show", {
        get: function () {
            return this.Show;
        },
        set: function (value) {
            if (value) {
                this.setPosition();
            }
            this.Show = this.hostClassShow = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgPasswordValidatorComponent.prototype, "placement", {
        get: function () {
            return this.data.options.placement;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgPasswordValidatorComponent.prototype, "element", {
        get: function () {
            return this.data.element;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgPasswordValidatorComponent.prototype, "elementPosition", {
        get: function () {
            return this.data.elementPosition;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgPasswordValidatorComponent.prototype, "options", {
        get: function () {
            return this.data.options;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgPasswordValidatorComponent.prototype, "popupOffset", {
        get: function () {
            switch (this.data.options.offset) {
                case "":
                    return defaultOptions.offset;
                case "0":
                    return +this.data.options.offset;
                default:
                    return +this.data.options.offset;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgPasswordValidatorComponent.prototype, "rules", {
        get: function () {
            return __assign(__assign({}, this.data.defaultOptions.rules), this.data.options.rules);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgPasswordValidatorComponent.prototype, "defaultOptions", {
        get: function () {
            return this.data.defaultOptions;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Component initialization
     *
     * @memberof NgPasswordValidatorComponent
     */
    NgPasswordValidatorComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.setCustomClass();
        this.setStyles();
        this.setTheme();
        this.setCustomText();
        this.dataService.updatedValue.subscribe(function (data) {
            _this.passwordStatus = __assign(__assign({}, _this.passwordStatus), data);
            for (var propName in _this.passwordOptions.rules) {
                if (!_this.passwordOptions.rules[propName]) {
                    delete _this.passwordStatus[propName];
                }
            }
            _this.isSecure = Object.values(_this.passwordStatus).every(function (value) { return value; });
        });
    };
    NgPasswordValidatorComponent.prototype.ngOnChanges = function (changes) {
        if (changes && changes.data && changes.data.currentValue) {
            this.data = changes.data.currentValue;
        }
    };
    /**
     * Set popup window position
     *
     * @returns {void}
     * @memberof NgPasswordValidatorComponent
     */
    NgPasswordValidatorComponent.prototype.setPosition = function () {
        var e_1, _a;
        if (this.setHostStyle(this.placement)) {
            this.setPlacementClass(this.placement);
            return;
        }
        else {
            // Is popup outside the visible area
            var placements = ["top", "right", "bottom", "left"];
            var isPlacementSet = void 0;
            try {
                for (var placements_1 = __values(placements), placements_1_1 = placements_1.next(); !placements_1_1.done; placements_1_1 = placements_1.next()) {
                    var placement = placements_1_1.value;
                    if (this.setHostStyle(placement)) {
                        this.setPlacementClass(placement);
                        isPlacementSet = true;
                        return;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (placements_1_1 && !placements_1_1.done && (_a = placements_1.return)) _a.call(placements_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            // Set original placement
            if (!isPlacementSet) {
                this.setHostStyle(this.placement);
                this.setPlacementClass(this.placement);
            }
        }
    };
    /**
     * Set popup placement class
     *
     * @param {string} placement
     * @memberof NgPasswordValidatorComponent
     */
    NgPasswordValidatorComponent.prototype.setPlacementClass = function (placement) {
        this.renderer.addClass(this.elementRef.nativeElement, "popup-" + placement);
    };
    /**
     * Set host element style
     *
     * @param {string} placement
     * @returns {boolean}
     * @memberof NgPasswordValidatorComponent
     */
    NgPasswordValidatorComponent.prototype.setHostStyle = function (placement) {
        var isSvg = this.element instanceof SVGElement;
        var popup = this.elementRef.nativeElement;
        var isCustomPosition = !this.elementPosition.right;
        var elementHeight = isSvg ? this.element.getBoundingClientRect().height : this.element.offsetHeight;
        var elementWidth = isSvg ? this.element.getBoundingClientRect().width : this.element.offsetWidth;
        var popupHeight = popup.clientHeight;
        var popupWidth = popup.clientWidth;
        var scrollY = window.pageYOffset;
        if (isCustomPosition) {
            elementHeight = 0;
            elementWidth = 0;
        }
        var topStyle;
        var leftStyle;
        switch (placement) {
            case "top":
                topStyle = (this.elementPosition.top + scrollY) - (popupHeight + this.popupOffset);
                leftStyle = this.elementPosition.left;
                break;
            case "bottom":
                topStyle = (this.elementPosition.top + scrollY) + elementHeight + this.popupOffset;
                leftStyle = this.elementPosition.left;
                break;
            case "left":
                leftStyle = this.elementPosition.left - popupWidth - this.popupOffset;
                topStyle = (this.elementPosition.top + scrollY);
                break;
            case "right":
                leftStyle = this.elementPosition.left + elementWidth + this.popupOffset;
                topStyle = (this.elementPosition.top + scrollY);
        }
        this.hostStyleTop = topStyle + "px";
        this.hostStyleLeft = leftStyle + "px";
        return true;
    };
    /**
     * Sets Z-index
     *
     * @memberof NgPasswordValidatorComponent
     */
    NgPasswordValidatorComponent.prototype.setZIndex = function () {
        if (this.options["z-index"] !== 0) {
            this.hostStyleZIndex = this.options["z-index"];
        }
    };
    /**
     * Ste custom class name
     *
     * @memberof NgPasswordValidatorComponent
     */
    NgPasswordValidatorComponent.prototype.setCustomClass = function () {
        var _this = this;
        if (this.options["customClass"]) {
            this.options["customClass"].split(" ").forEach(function (className) {
                _this.renderer.addClass(_this.elementRef.nativeElement, className);
            });
        }
    };
    /**
     * Set theme
     *
     * @memberof NgPasswordValidatorComponent
     */
    NgPasswordValidatorComponent.prototype.setTheme = function () {
        if (this.options["theme"]) {
            this.renderer.addClass(this.elementRef.nativeElement, "popup-" + this.options["theme"]);
        }
    };
    NgPasswordValidatorComponent.prototype.setCustomText = function () {
        if (this.options["heading"]) {
            this.heading = this.options["heading"];
        }
        if (this.options["successMessage"]) {
            this.successMessage = this.options["successMessage"];
        }
    };
    /**
     * Sets the animation duration
     *
     * @memberof NgPasswordValidatorComponent
     */
    NgPasswordValidatorComponent.prototype.setAnimationDuration = function () {
        this.hostStyleTransition = "opacity " + this.options["animation-duration"] + "ms";
    };
    /**
     * Set popup window style
     *
     * @memberof NgPasswordValidatorComponent
     */
    NgPasswordValidatorComponent.prototype.setStyles = function () {
        this.setZIndex();
        this.setAnimationDuration();
        this.hostClassShadow = this.options["shadow"];
        this.hostStyleMaxWidth = this.options["max-width"] + "px";
        this.hostStyleWidth = this.options["width"] ? this.options["width"] + "px" : "";
    };
    NgPasswordValidatorComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: DataService }
    ]; };
    __decorate([
        Input()
    ], NgPasswordValidatorComponent.prototype, "data", void 0);
    __decorate([
        HostBinding("style.top")
    ], NgPasswordValidatorComponent.prototype, "hostStyleTop", void 0);
    __decorate([
        HostBinding("style.left")
    ], NgPasswordValidatorComponent.prototype, "hostStyleLeft", void 0);
    __decorate([
        HostBinding("style.z-index")
    ], NgPasswordValidatorComponent.prototype, "hostStyleZIndex", void 0);
    __decorate([
        HostBinding("style.transition")
    ], NgPasswordValidatorComponent.prototype, "hostStyleTransition", void 0);
    __decorate([
        HostBinding("style.width")
    ], NgPasswordValidatorComponent.prototype, "hostStyleWidth", void 0);
    __decorate([
        HostBinding("style.max-width")
    ], NgPasswordValidatorComponent.prototype, "hostStyleMaxWidth", void 0);
    __decorate([
        HostBinding("style.pointer-events")
    ], NgPasswordValidatorComponent.prototype, "hostStylePointerEvents", void 0);
    __decorate([
        HostBinding("class.popup-show")
    ], NgPasswordValidatorComponent.prototype, "hostClassShow", void 0);
    __decorate([
        HostBinding("class.popup-shadow")
    ], NgPasswordValidatorComponent.prototype, "hostClassShadow", void 0);
    __decorate([
        HostListener("transitionend", [""])
    ], NgPasswordValidatorComponent.prototype, "transitionEnd", null);
    __decorate([
        Input()
    ], NgPasswordValidatorComponent.prototype, "show", null);
    NgPasswordValidatorComponent = __decorate([
        Component({
            selector: "NgPasswordValidator",
            template: "<div class=\"popup-window\">\n    <div class=\"heading\">{{heading}}</div>\n    <div *ngIf=\"rules['password']\">\n        <div class=\"rule\" [hidden]=\"rules['password'].type !== 'number'\"\n            [ngClass]=\"{'rule-pass':passwordStatus['password']}\">\n            Password length should be {{rules['password'].length}} characters.\n        </div>\n        <div class=\"rule\" [hidden]=\"rules['password'].type !== 'range'\"\n            [ngClass]=\"{'rule-pass':passwordStatus['password']}\">\n            Password length should be {{rules['password'].min}} - {{rules['password'].max}}\n            characters.\n        </div>\n    </div>\n    <div class=\"rule\" [hidden]=\"!rules['include-symbol']\"\n        [ngClass]=\"{'rule-pass':passwordStatus['include-symbol']}\">\n        Include Symbols:( e.g. @#$% )\n    </div>\n    <div class=\"rule\" [hidden]=\"!rules['include-number']\"\n        [ngClass]=\"{'rule-pass':passwordStatus['include-number']}\">\n        Include Numbers:( e.g.123456 )\n    </div>\n    <div class=\"rule\" [hidden]=\"!rules['include-lowercase-characters']\"\n        [ngClass]=\"{'rule-pass':passwordStatus['include-lowercase-characters']}\">\n        Include Lowercase Characters:(e.g. abcdefgh )\n    </div>\n    <div class=\"rule\" [hidden]=\"!rules['include-uppercase-characters']\"\n        [ngClass]=\"{'rule-pass':passwordStatus['include-uppercase-characters']}\">\n        Include Uppercase Characters:(e.g. ABCDEFGH )\n    </div>\n    <div class=\"success-message\" [hidden]=\"!isSecure\">\n        {{successMessage}}\n    </div>\n</div>\n",
            host: { class: "popup" },
            styles: ["@charset \"UTF-8\";:host{max-width:390px;background-color:#fff;color:#000;text-align:left;border-radius:6px;position:absolute;pointer-events:none;padding:10px;z-index:1000;display:block;opacity:0;transition:opacity .3s ease-in-out;top:0;left:0}:host.popup-show{opacity:1}:host.popup-shadow{box-shadow:0 1px 5px 0 rgba(0,0,0,.4)}:host.popup .popup-window .heading{font-size:16px;color:#000;margin-bottom:.5rem;font-weight:700}:host.popup .popup-window .rule{font-size:14px;color:#6a6a6a;line-height:18px;margin:3px 0}:host.popup .popup-window .rule::before{content:\"\\a\";width:5px;height:5px;border-radius:50%;background:#6a6a6a;display:inline-block;vertical-align:sub;margin:0 10px 6px 0}:host.popup .popup-window .rule.rule-pass{text-decoration:line-through;color:#d3d3d3}:host.popup .popup-window .rule.rule-pass::before{background:#d3d3d3}:host.popup .popup-window .success-message{color:#28a745;text-align:center;font-size:16px;margin-top:5px}:host.popup.popup-pro .popup-window .rule.rule-pass{color:#28a745;text-decoration:none}:host.popup.popup-pro .popup-window .rule.rule-pass::before{content:\"\u2713\"!important;width:0;height:0;padding-right:5px;vertical-align:inherit;background:#28a745}:host.popup.popup-pro .popup-window .success-message{color:#9c0404}"]
        })
    ], NgPasswordValidatorComponent);
    return NgPasswordValidatorComponent;
}());
export { NgPasswordValidatorComponent };
//# sourceMappingURL=data:application/json;base64,