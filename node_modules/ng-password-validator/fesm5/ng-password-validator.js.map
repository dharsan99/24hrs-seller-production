{"version":3,"file":"ng-password-validator.js","sources":["ng://ng-password-validator/lib/ng-password-validator.service.ts","ng://ng-password-validator/lib/options.ts","ng://ng-password-validator/lib/data.service.ts","ng://ng-password-validator/lib/ng-password-validator.component.ts","ng://ng-password-validator/lib/ng-password-validator.directive.ts","ng://ng-password-validator/lib/ng-password-validator.module.ts","ng://ng-password-validator/ng-password-validator.ts"],"sourcesContent":["\nimport { InjectionToken } from \"@angular/core\";\n\nimport { NgPasswordValidatorOptions } from \"./ng-password-validator.interface\";\n\n/**\n * This is not a real service, but it looks like it from the outside.\n * It's just an InjectionToken used to import the config (initOptions) object, provided from the outside\n */\nexport const NgPasswordValidatorService = new InjectionToken<NgPasswordValidatorOptions>(\"NgPasswordValidatorOptions\");\n","import { IStatus, NgPasswordValidatorOptions } from \"./ng-password-validator.interface\";\n\nexport const defaultOptions: NgPasswordValidatorOptions = {\n    placement: \"bottom\",\n    \"z-index\": 0,\n    \"custom-class\": \"custom-class\",\n    shadow: true,\n    theme: \"pro\",\n    offset: 8,\n    heading: \"Password Policy\",\n    successMessage: \"Awesome! Password requirement fulfilled.\",\n    rules: {\n        password: {\n            type: \"range\",\n            length: 8,\n            min: 6,\n            max: 10,\n        },\n        \"include-symbol\": true,\n        \"include-number\": true,\n        \"include-lowercase-characters\": true,\n        \"include-uppercase-characters\": true,\n    }\n};\n\nexport const initializeStage: IStatus = {\n    password: false,\n    \"include-symbol\": false,\n    \"include-number\": false,\n    \"include-lowercase-characters\": false,\n    \"include-uppercase-characters\": false,\n};\n","import { Injectable } from \"@angular/core\";\nimport { BehaviorSubject } from \"rxjs\";\n\nimport { IStatus } from \"./ng-password-validator.interface\";\nimport { initializeStage } from \"./options\";\n\n@Injectable()\nexport class DataService {\n\n    private value = new BehaviorSubject(initializeStage);\n    updatedValue = this.value.asObservable();\n\n\n    /**\n     * Update value\n     *\n     * @param {IStatus} data\n     * @memberof DataService\n     */\n    updateValue(data: IStatus): void {\n        this.value.next(data);\n    }\n\n}\n","import {\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    HostListener,\n    Input,\n    OnChanges,\n    OnInit,\n    Renderer2,\n    SimpleChanges\n} from \"@angular/core\";\n\nimport { DataService } from \"./data.service\";\nimport { IElementPosition, IRules, IStatus, NgPasswordValidatorOptions } from \"./ng-password-validator.interface\";\nimport { defaultOptions } from \"./options\";\n@Component({\n    selector: \"NgPasswordValidator\",\n    templateUrl: \"./ng-password-validator.component.html\",\n    host: { class: \"popup\" },\n    styleUrls: [\"./ng-password-validator.component.scss\"]\n})\nexport class NgPasswordValidatorComponent implements OnInit, OnChanges {\n    heading: string;\n    successMessage: string;\n    passwordStatus = {\n        password: false,\n        \"include-symbol\": false,\n        \"include-number\": false,\n        \"include-lowercase-characters\": false,\n        \"include-uppercase-characters\": false,\n    };\n    isSecure = false;\n    Show = false;\n    events = new EventEmitter();\n    passwordOptions: NgPasswordValidatorOptions = { ...defaultOptions };\n\n    @Input() data: any;\n\n    @HostBinding(\"style.top\") hostStyleTop: string;\n    @HostBinding(\"style.left\") hostStyleLeft: string;\n    @HostBinding(\"style.z-index\") hostStyleZIndex: number;\n    @HostBinding(\"style.transition\") hostStyleTransition: string;\n    @HostBinding(\"style.width\") hostStyleWidth: string;\n    @HostBinding(\"style.max-width\") hostStyleMaxWidth: string;\n    @HostBinding(\"style.pointer-events\") hostStylePointerEvents: string;\n    @HostBinding(\"class.popup-show\") hostClassShow: boolean;\n    @HostBinding(\"class.popup-shadow\") hostClassShadow: boolean;\n\n    /**\n     * Host listener transition end\n     *\n     * @memberof NgPasswordValidatorComponent\n     */\n    @HostListener(\"transitionend\", [\"\"])\n    transitionEnd(): void {\n        if (this.show) {\n            this.events.emit({\n                type: \"shown\"\n            });\n        }\n    }\n\n    @Input() set show(value: boolean) {\n        if (value) {\n            this.setPosition();\n        }\n        this.Show = this.hostClassShow = value;\n    }\n\n    get show(): boolean {\n        return this.Show;\n    }\n\n    get placement(): string {\n        return this.data.options.placement;\n    }\n\n    get element() {\n        return this.data.element;\n    }\n\n    get elementPosition(): IElementPosition {\n        return this.data.elementPosition;\n    }\n\n    get options(): NgPasswordValidatorOptions {\n        return this.data.options;\n    }\n\n    get popupOffset(): number {\n        switch (this.data.options.offset) {\n            case \"\":\n                return defaultOptions.offset;\n\n            case \"0\":\n                return +this.data.options.offset;\n\n            default:\n                return +this.data.options.offset;\n        }\n    }\n\n    get rules(): IRules {\n        return { ...this.data.defaultOptions.rules, ... this.data.options.rules };\n    }\n\n    get defaultOptions(): NgPasswordValidatorOptions {\n        return this.data.defaultOptions;\n    }\n\n    constructor(private elementRef: ElementRef, private renderer: Renderer2, private dataService: DataService) { }\n\n    /**\n     * Component initialization\n     *\n     * @memberof NgPasswordValidatorComponent\n     */\n    ngOnInit(): void {\n        this.setCustomClass();\n        this.setStyles();\n        this.setTheme();\n        this.setCustomText();\n        this.dataService.updatedValue.subscribe((data: IStatus) => {\n            this.passwordStatus = { ... this.passwordStatus, ...data };\n            for (const propName in this.passwordOptions.rules) {\n                if (!this.passwordOptions.rules[propName]) {\n                    delete this.passwordStatus[propName];\n                }\n            }\n            this.isSecure = Object.values(this.passwordStatus).every((value: boolean) => value);\n        });\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes && changes.data && changes.data.currentValue) {\n            this.data = changes.data.currentValue;\n        }\n    }\n\n    /**\n     * Set popup window position\n     *\n     * @returns {void}\n     * @memberof NgPasswordValidatorComponent\n     */\n    setPosition(): void {\n        if (this.setHostStyle(this.placement)) {\n            this.setPlacementClass(this.placement);\n\n            return;\n        } else {\n            // Is popup outside the visible area\n            const placements = [\"top\", \"right\", \"bottom\", \"left\"];\n            let isPlacementSet;\n\n            for (const placement of placements) {\n                if (this.setHostStyle(placement)) {\n                    this.setPlacementClass(placement);\n                    isPlacementSet = true;\n\n                    return;\n                }\n            }\n\n            // Set original placement\n            if (!isPlacementSet) {\n                this.setHostStyle(this.placement);\n                this.setPlacementClass(this.placement);\n            }\n        }\n    }\n\n    /**\n     * Set popup placement class\n     *\n     * @param {string} placement\n     * @memberof NgPasswordValidatorComponent\n     */\n    setPlacementClass(placement: string): void {\n        this.renderer.addClass(this.elementRef.nativeElement, \"popup-\" + placement);\n    }\n\n    /**\n     * Set host element style\n     *\n     * @param {string} placement\n     * @returns {boolean}\n     * @memberof NgPasswordValidatorComponent\n     */\n    setHostStyle(placement: string): boolean {\n        const isSvg = this.element instanceof SVGElement;\n        const popup = this.elementRef.nativeElement;\n        const isCustomPosition = !this.elementPosition.right;\n\n        let elementHeight = isSvg ? this.element.getBoundingClientRect().height : this.element.offsetHeight;\n        let elementWidth = isSvg ? this.element.getBoundingClientRect().width : this.element.offsetWidth;\n        const popupHeight = popup.clientHeight;\n        const popupWidth = popup.clientWidth;\n        const scrollY = window.pageYOffset;\n\n        if (isCustomPosition) {\n            elementHeight = 0;\n            elementWidth = 0;\n        }\n\n        let topStyle;\n        let leftStyle;\n\n        switch (placement) {\n            case \"top\":\n                topStyle = (this.elementPosition.top + scrollY) - (popupHeight + this.popupOffset);\n                leftStyle = this.elementPosition.left;\n\n                break;\n\n            case \"bottom\":\n                topStyle = (this.elementPosition.top + scrollY) + elementHeight + this.popupOffset;\n                leftStyle = this.elementPosition.left;\n\n                break;\n            case \"left\":\n                leftStyle = this.elementPosition.left - popupWidth - this.popupOffset;\n                topStyle = (this.elementPosition.top + scrollY);\n\n                break;\n\n            case \"right\":\n                leftStyle = this.elementPosition.left + elementWidth + this.popupOffset;\n                topStyle = (this.elementPosition.top + scrollY);\n\n        }\n\n        this.hostStyleTop = topStyle + \"px\";\n        this.hostStyleLeft = leftStyle + \"px\";\n\n        return true;\n    }\n\n    /**\n     * Sets Z-index\n     *\n     * @memberof NgPasswordValidatorComponent\n     */\n    setZIndex(): void {\n        if (this.options[\"z-index\"] !== 0) {\n            this.hostStyleZIndex = this.options[\"z-index\"];\n        }\n    }\n\n    /**\n     * Ste custom class name\n     *\n     * @memberof NgPasswordValidatorComponent\n     */\n    setCustomClass(): void {\n        if (this.options[\"customClass\"]) {\n            this.options[\"customClass\"].split(\" \").forEach((className: string) => {\n                this.renderer.addClass(this.elementRef.nativeElement, className);\n            });\n        }\n    }\n\n    /**\n     * Set theme\n     *\n     * @memberof NgPasswordValidatorComponent\n     */\n    setTheme(): void {\n        if (this.options[\"theme\"]) {\n            this.renderer.addClass(this.elementRef.nativeElement, \"popup-\" + this.options[\"theme\"]);\n        }\n    }\n\n    setCustomText(): void {\n        if (this.options[\"heading\"]) {\n            this.heading = this.options[\"heading\"];\n        }\n\n        if (this.options[\"successMessage\"]) {\n            this.successMessage = this.options[\"successMessage\"];\n        }\n    }\n\n\n    /**\n     * Sets the animation duration\n     *\n     * @memberof NgPasswordValidatorComponent\n     */\n    setAnimationDuration(): void {\n        this.hostStyleTransition = \"opacity \" + this.options[\"animation-duration\"] + \"ms\";\n    }\n\n    /**\n     * Set popup window style\n     *\n     * @memberof NgPasswordValidatorComponent\n     */\n    setStyles(): void {\n        this.setZIndex();\n        this.setAnimationDuration();\n\n        this.hostClassShadow = this.options[\"shadow\"];\n        this.hostStyleMaxWidth = this.options[\"max-width\"] + \"px\";\n        this.hostStyleWidth = this.options[\"width\"] ? this.options[\"width\"] + \"px\" : \"\";\n    }\n}\n","import {\n    ApplicationRef,\n    ComponentFactoryResolver,\n    Directive,\n    ElementRef,\n    EmbeddedViewRef,\n    EventEmitter,\n    HostListener,\n    Inject,\n    Injector,\n    Input,\n    OnChanges,\n    OnDestroy,\n    Optional,\n    Output,\n    SimpleChange\n} from \"@angular/core\";\nimport { Subscription } from \"rxjs\";\n\nimport { DataService } from \"./data.service\";\nimport { NgPasswordValidatorComponent } from \"./ng-password-validator.component\";\nimport { IElementPosition, IPosition, NgPasswordValidatorOptions } from \"./ng-password-validator.interface\";\nimport { NgPasswordValidatorService } from \"./ng-password-validator.service\";\nimport { defaultOptions } from \"./options\";\n\nexport interface HostComponent {\n    data: any;\n    show: boolean;\n    close: boolean;\n    events: any;\n}\n\n@Directive({\n    selector: \"[NgPasswordValidator]\",\n    exportAs: \"NgPasswordValidator\",\n})\n\nexport class NgPasswordValidatorDirective implements OnDestroy, OnChanges {\n    regExpForLength = /^(.){8}$/;\n    regExpForOneUpper = /^(?=.*[A-Z])(.*)$/;\n    regExpForOneLower = /^(?=.*[a-z])(.*)$/;\n    regExpForOneDigit = /^(?=.*[0-9])(.*)$/;\n    regExpForSpecialCharacters = /^(?=.*[!@#$%^&*])([a-zA-Z0-9!@#$%^&*]*)$/;\n\n    isValid = false;\n    inputValue = \"\";\n    componentRef: any;\n    elementPosition: IElementPosition;\n    passwordOptions: NgPasswordValidatorOptions;\n    componentSubscribe: Subscription;\n\n    @Input(\"options\") set optionsInput(value: NgPasswordValidatorOptions) {\n        if (value && defaultOptions) {\n            this.passwordOptions = this.deepMerge(defaultOptions, value);\n            this.createPasswordRegex();\n        }\n    }\n    @Input(\"NgPasswordValidator\") popup: NgPasswordValidatorOptions;\n    @Input(\"placement\") placement: string;\n    @Input(\"z-index\") zIndex: number;\n    @Input(\"animation-duration\") animationDuration: number;\n    @Input(\"custom-class\") customClass: string;\n    @Input(\"shadow\") shadow: boolean;\n    @Input(\"theme\") theme: \"basic\" | \"pro\";\n    @Input(\"offset\") offset: number;\n    @Input(\"width\") width: number;\n    @Input(\"max-width\") maxWidth: number;\n    @Input(\"position\") position: IPosition;\n    @Input(\"heading\") heading: string;\n    @Input(\"successMessage\") successMessage: string;\n\n    @Output() events: EventEmitter<any> = new EventEmitter<any>();\n    @Output() valid: EventEmitter<boolean> = new EventEmitter();\n\n    constructor(\n        @Optional() @Inject(NgPasswordValidatorService) private initOptions,\n        private elementRef: ElementRef,\n        private componentFactoryResolver: ComponentFactoryResolver,\n        private appRef: ApplicationRef,\n        private dataService: DataService,\n        private injector: Injector) {\n    }\n\n    get options() {\n        return this.passwordOptions;\n    }\n\n    get isPopupDestroyed(): boolean {\n        return this.componentRef && this.componentRef.hostView.destroyed;\n    }\n\n    /**\n     * Get popup position\n     *\n     * @readonly\n     * @type {(IElementPosition | IPosition)}\n     * @memberof NgPasswordValidatorDirective\n     */\n    get popupPosition(): IElementPosition | IPosition {\n        if (this.options[\"position\"]) {\n            return this.options[\"position\"];\n        } else {\n            return this.elementPosition;\n        }\n    }\n\n    /**\n     * Focus in input field\n     *\n     * @memberof NgPasswordValidatorDirective\n     */\n    @HostListener(\"focusin\", [\"$event.target.value\"])\n    onMouseEnter(value: any): void {\n        this.updatePasswordOptions();\n        this.show();\n        this.checkPassword(value);\n    }\n    /**\n     * Update password options\n     *\n     * @memberof NgPasswordValidatorDirective\n     */\n    updatePasswordOptions(): void {\n        if (this.popup && defaultOptions) {\n            this.passwordOptions = this.deepMerge(defaultOptions, this.popup);\n            this.createPasswordRegex();\n        }\n    }\n\n    /**\n     * Focus out of input field\n     *\n     * @memberof NgPasswordValidatorDirective\n     */\n    @HostListener(\"focusout\")\n    onMouseLeave(): void {\n        this.destroyPopup();\n        this.valid.emit(this.isValid);\n    }\n\n    /**\n     * Input field value\n     *\n     * @param {string} value\n     * @memberof NgPasswordValidatorDirective\n     */\n    @HostListener(\"input\", [\"$event.target.value\"])\n    onInput(value: string): void {\n        this.checkPassword(value);\n    }\n\n    /**\n     * On input change\n     *\n     * @param {{ popup: SimpleChange }} changes\n     * @memberof NgPasswordValidatorDirective\n     */\n    ngOnChanges(changes: { popup: SimpleChange }): void {\n        const changedOptions = this.getProperties(changes);\n        this.applyOptionsDefault(changedOptions, defaultOptions);\n    }\n\n    /**\n     * Destroy the pop up and unsubscribe to release the memory\n     *\n     * @memberof NgPasswordValidatorDirective\n     */\n    ngOnDestroy(): void {\n        this.destroyPopup();\n        if (this.componentSubscribe) {\n            this.componentSubscribe.unsubscribe();\n        }\n    }\n\n    /**\n     * Deep merge objects\n     *\n     * @param {NgPasswordValidatorOptions} target\n     * @param {NgPasswordValidatorOptions} source\n     * @returns {NgPasswordValidatorOptions}\n     * @memberof NgPasswordValidatorDirective\n     */\n    deepMerge(target: NgPasswordValidatorOptions, source: NgPasswordValidatorOptions): NgPasswordValidatorOptions {\n        // Iterate through `source` properties and if an `Object` set property to merge of `target` and `source` properties\n        for (const key of Object.keys(source)) {\n            if (source[key] instanceof Object) { Object.assign(source[key], this.deepMerge(target[key], source[key])); }\n        }\n\n        // Join `target` and modified `source`\n        Object.assign(target || {}, source);\n\n        return target;\n    }\n\n    /**\n     * Create password regex\n     *\n     * @memberof NgPasswordValidatorDirective\n     */\n    createPasswordRegex(): void {\n        if (this.passwordOptions.rules.password) {\n            switch (this.passwordOptions.rules[\"password\"].type) {\n                case \"number\":\n                    this.regExpForLength = new RegExp(`^(.){${this.passwordOptions.rules[\"password\"].length}}$`);\n                    break;\n\n                case \"range\":\n                    this.regExpForLength =\n                        new RegExp(`^(.){${this.passwordOptions.rules[\"password\"].min},${this.passwordOptions.rules[\"password\"].max}}$`);\n            }\n        }\n    }\n\n    /**\n     * Check password if valid or not\n     *\n     * @param {string} inputValue\n     * @memberof NgPasswordValidatorDirective\n     */\n    checkPassword(inputValue: string): void {\n        const data = {\n            password: inputValue && inputValue.length && inputValue.match(this.regExpForLength) ? true : false,\n            \"include-symbol\": inputValue && inputValue.length && inputValue.match(this.regExpForSpecialCharacters) ? true : false,\n            \"include-number\": inputValue && inputValue.length && inputValue.match(this.regExpForOneDigit) ? true : false,\n            \"include-lowercase-characters\": inputValue && inputValue.length && inputValue.match(this.regExpForOneLower) ? true : false,\n            \"include-uppercase-characters\": inputValue && inputValue.length && inputValue.match(this.regExpForOneUpper) ? true : false,\n        };\n\n        for (const propName in this.passwordOptions.rules) {\n            if (!this.passwordOptions.rules[propName]) {\n                delete data[propName];\n            }\n        }\n        this.isValid = Object.values(data).every((value: boolean) => value);\n        this.dataService.updateValue(data);\n    }\n\n    /**\n     * Get properties\n     *\n     * @param {{ popup: SimpleChange }} changes\n     * @returns {{ popup: any }}\n     * @memberof NgPasswordValidatorDirective\n     */\n    getProperties(changes: { popup: SimpleChange }): { popup: any } {\n        const directiveProperties: any = {};\n        let customProperties: any = {};\n        let allProperties: any = {};\n\n        // tslint:disable-next-line: forin\n        for (const prop in changes) {\n            if (prop !== \"options\") {\n                directiveProperties[prop] = changes[prop].currentValue;\n            }\n            if (prop === \"options\") {\n                customProperties = changes[prop].currentValue;\n            }\n        }\n\n        allProperties = Object.assign({}, customProperties, directiveProperties);\n\n        return allProperties;\n    }\n\n    /**\n     * Get element position\n     *\n     * @memberof NgPasswordValidatorDirective\n     */\n    getElementPosition(): void {\n        this.elementPosition = this.elementRef.nativeElement.getBoundingClientRect();\n    }\n\n    /**\n     * Create Popup\n     *\n     * @memberof NgPasswordValidatorDirective\n     */\n    createPopup(): void {\n        this.getElementPosition();\n        this.appendComponentToBody(NgPasswordValidatorComponent);\n        this.showPopupElem();\n    }\n\n    /**\n     * Destroy Popup\n     *\n     * @returns {void}\n     * @memberof NgPasswordValidatorDirective\n     */\n    destroyPopup(): void {\n        if (!this.isPopupDestroyed) {\n            this.hidePopup();\n\n            if (!this.componentRef || this.isPopupDestroyed) {\n                return;\n            }\n\n            this.appRef.detachView(this.componentRef.hostView);\n            this.componentRef.destroy();\n            this.events.emit({\n                type: \"hidden\",\n                position: this.popupPosition\n            });\n        }\n    }\n\n    /**\n     * Show popup window\n     *\n     * @memberof NgPasswordValidatorDirective\n     */\n    showPopupElem(): void {\n        (this.componentRef.instance as HostComponent).show = true;\n        this.events.emit({\n            type: \"show\",\n            position: this.popupPosition\n        });\n    }\n\n    /**\n     * Hide popup window\n     *\n     * @returns {void}\n     * @memberof NgPasswordValidatorDirective\n     */\n    hidePopup(): void {\n        if (!this.componentRef || this.isPopupDestroyed) {\n            return;\n        }\n        (this.componentRef.instance as HostComponent).show = false;\n        this.events.emit({\n            type: \"hide\",\n            position: this.popupPosition\n        });\n    }\n\n    /**\n     * Append created popup window to body\n     *\n     * @param {*} component\n     * @memberof NgPasswordValidatorDirective\n     */\n    appendComponentToBody(component: any): void {\n        this.componentRef = this.componentFactoryResolver\n            .resolveComponentFactory(component)\n            .create(this.injector);\n        (this.componentRef.instance as HostComponent).data = {\n            element: this.elementRef.nativeElement,\n            elementPosition: this.popupPosition,\n            options: this.options,\n            defaultOptions\n        };\n\n        this.appRef.attachView(this.componentRef.hostView);\n        const domElem = (this.componentRef.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\n        document.body.appendChild(domElem);\n\n        this.componentSubscribe = (this.componentRef.instance as HostComponent).events.subscribe((event: any) => {\n            this.handleEvents(event);\n        });\n    }\n\n    /**\n     * Reset/switching back to default options\n     *\n     * @param {NgPasswordValidatorOptions} defaultOption\n     * @param {{ popup: SimpleChange }} options\n     * @memberof NgPasswordValidatorDirective\n     */\n    applyOptionsDefault(options: { popup: SimpleChange }, defaultOption: NgPasswordValidatorOptions): void {\n        this.initOptions = Object.assign({}, this.initOptions || {}, options, defaultOption);\n    }\n\n    /**\n     * Handle events\n     *\n     * @param {*} event\n     * @memberof NgPasswordValidatorDirective\n     */\n    handleEvents(event: any): void {\n        if (event.type === \"shown\") {\n            this.events.emit({\n                type: \"shown\",\n                position: this.popupPosition\n            });\n        }\n    }\n\n    /**\n     * It creates popup window to show password requirement\n     *\n     * @memberof NgPasswordValidatorDirective\n     */\n    show(): void {\n        if (!this.componentRef || this.isPopupDestroyed) {\n            this.createPopup();\n        } else if (!this.isPopupDestroyed) {\n            this.showPopupElem();\n        }\n    }\n\n    /**\n     * Hide/Destroys popup windows\n     *\n     * @memberof NgPasswordValidatorDirective\n     */\n    hide(): void {\n        this.destroyPopup();\n    }\n}\n","import { CommonModule } from \"@angular/common\";\nimport { ModuleWithProviders, NgModule } from \"@angular/core\";\n\nimport { DataService } from \"./data.service\";\nimport { NgPasswordValidatorComponent } from \"./ng-password-validator.component\";\nimport { NgPasswordValidatorDirective } from \"./ng-password-validator.directive\";\nimport { NgPasswordValidatorOptions } from \"./ng-password-validator.interface\";\nimport { NgPasswordValidatorService } from \"./ng-password-validator.service\";\n@NgModule({\n    declarations: [\n        NgPasswordValidatorDirective,\n        NgPasswordValidatorComponent,\n    ],\n    imports: [\n        CommonModule\n    ],\n    providers: [DataService],\n    exports: [\n        NgPasswordValidatorDirective\n    ],\n    entryComponents: [\n        NgPasswordValidatorComponent\n    ]\n})\nexport class NgPasswordValidatorModule {\n\n    /**\n     * Password validator module\n     *\n     * @static\n     * @param {NgPasswordValidatorOptions} initOptions\n     * @returns {ModuleWithProviders<NgPasswordValidatorModule>}\n     * @memberof NgPasswordValidatorModule\n     */\n    static forRoot(initOptions: NgPasswordValidatorOptions): ModuleWithProviders<NgPasswordValidatorModule> {\n        return {\n            ngModule: NgPasswordValidatorModule,\n            providers: [\n                {\n                    provide: NgPasswordValidatorService,\n                    useValue: initOptions\n                }\n            ]\n        };\n    }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {DataService as ɵa} from './lib/data.service';"],"names":[],"mappings":";;;;;AAKA;;;;IAIa,0BAA0B,GAAG,IAAI,cAAc,CAA6B,4BAA4B;;ACP9G,IAAM,cAAc,GAA+B;IACtD,SAAS,EAAE,QAAQ;IACnB,SAAS,EAAE,CAAC;IACZ,cAAc,EAAE,cAAc;IAC9B,MAAM,EAAE,IAAI;IACZ,KAAK,EAAE,KAAK;IACZ,MAAM,EAAE,CAAC;IACT,OAAO,EAAE,iBAAiB;IAC1B,cAAc,EAAE,0CAA0C;IAC1D,KAAK,EAAE;QACH,QAAQ,EAAE;YACN,IAAI,EAAE,OAAO;YACb,MAAM,EAAE,CAAC;YACT,GAAG,EAAE,CAAC;YACN,GAAG,EAAE,EAAE;SACV;QACD,gBAAgB,EAAE,IAAI;QACtB,gBAAgB,EAAE,IAAI;QACtB,8BAA8B,EAAE,IAAI;QACpC,8BAA8B,EAAE,IAAI;KACvC;CACJ,CAAC;AAEK,IAAM,eAAe,GAAY;IACpC,QAAQ,EAAE,KAAK;IACf,gBAAgB,EAAE,KAAK;IACvB,gBAAgB,EAAE,KAAK;IACvB,8BAA8B,EAAE,KAAK;IACrC,8BAA8B,EAAE,KAAK;CACxC;;;ICxBD;QAEY,UAAK,GAAG,IAAI,eAAe,CAAC,eAAe,CAAC,CAAC;QACrD,iBAAY,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE,CAAC;KAa5C;;;;;;;IAJG,iCAAW,GAAX,UAAY,IAAa;QACrB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KACzB;IAdQ,WAAW;QADvB,UAAU,EAAE;OACA,WAAW,CAgBvB;IAAD,kBAAC;CAhBD;;;ICwGI,sCAAoB,UAAsB,EAAU,QAAmB,EAAU,WAAwB;QAArF,eAAU,GAAV,UAAU,CAAY;QAAU,aAAQ,GAAR,QAAQ,CAAW;QAAU,gBAAW,GAAX,WAAW,CAAa;QAtFzG,mBAAc,GAAG;YACb,QAAQ,EAAE,KAAK;YACf,gBAAgB,EAAE,KAAK;YACvB,gBAAgB,EAAE,KAAK;YACvB,8BAA8B,EAAE,KAAK;YACrC,8BAA8B,EAAE,KAAK;SACxC,CAAC;QACF,aAAQ,GAAG,KAAK,CAAC;QACjB,SAAI,GAAG,KAAK,CAAC;QACb,WAAM,GAAG,IAAI,YAAY,EAAE,CAAC;QAC5B,oBAAe,gBAAoC,cAAc,EAAG;KA4E0C;;;;;;IAxD9G,oDAAa,GAAb;QACI,IAAI,IAAI,CAAC,IAAI,EAAE;YACX,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;gBACb,IAAI,EAAE,OAAO;aAChB,CAAC,CAAC;SACN;KACJ;IAEQ,sBAAI,8CAAI;aAOjB;YACI,OAAO,IAAI,CAAC,IAAI,CAAC;SACpB;aATQ,UAAS,KAAc;YAC5B,IAAI,KAAK,EAAE;gBACP,IAAI,CAAC,WAAW,EAAE,CAAC;aACtB;YACD,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;SAC1C;;;OAAA;IAMD,sBAAI,mDAAS;aAAb;YACI,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC;SACtC;;;OAAA;IAED,sBAAI,iDAAO;aAAX;YACI,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC;SAC5B;;;OAAA;IAED,sBAAI,yDAAe;aAAnB;YACI,OAAO,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC;SACpC;;;OAAA;IAED,sBAAI,iDAAO;aAAX;YACI,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC;SAC5B;;;OAAA;IAED,sBAAI,qDAAW;aAAf;YACI,QAAQ,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM;gBAC5B,KAAK,EAAE;oBACH,OAAO,cAAc,CAAC,MAAM,CAAC;gBAEjC,KAAK,GAAG;oBACJ,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;gBAErC;oBACI,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;aACxC;SACJ;;;OAAA;IAED,sBAAI,+CAAK;aAAT;YACI,6BAAY,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,GAAM,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,EAAG;SAC7E;;;OAAA;IAED,sBAAI,wDAAc;aAAlB;YACI,OAAO,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC;SACnC;;;OAAA;;;;;;IASD,+CAAQ,GAAR;QAAA,iBAcC;QAbG,IAAI,CAAC,cAAc,EAAE,CAAC;QACtB,IAAI,CAAC,SAAS,EAAE,CAAC;QACjB,IAAI,CAAC,QAAQ,EAAE,CAAC;QAChB,IAAI,CAAC,aAAa,EAAE,CAAC;QACrB,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,SAAS,CAAC,UAAC,IAAa;YAClD,KAAI,CAAC,cAAc,yBAAS,KAAI,CAAC,cAAc,GAAK,IAAI,CAAE,CAAC;YAC3D,KAAK,IAAM,QAAQ,IAAI,KAAI,CAAC,eAAe,CAAC,KAAK,EAAE;gBAC/C,IAAI,CAAC,KAAI,CAAC,eAAe,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE;oBACvC,OAAO,KAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;iBACxC;aACJ;YACD,KAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,KAAI,CAAC,cAAc,CAAC,CAAC,KAAK,CAAC,UAAC,KAAc,IAAK,OAAA,KAAK,GAAA,CAAC,CAAC;SACvF,CAAC,CAAC;KACN;IAED,kDAAW,GAAX,UAAY,OAAsB;QAC9B,IAAI,OAAO,IAAI,OAAO,CAAC,IAAI,IAAI,OAAO,CAAC,IAAI,CAAC,YAAY,EAAE;YACtD,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC;SACzC;KACJ;;;;;;;IAQD,kDAAW,GAAX;;QACI,IAAI,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE;YACnC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YAEvC,OAAO;SACV;aAAM;;YAEH,IAAM,UAAU,GAAG,CAAC,KAAK,EAAE,OAAO,EAAE,QAAQ,EAAE,MAAM,CAAC,CAAC;YACtD,IAAI,cAAc,SAAA,CAAC;;gBAEnB,KAAwB,IAAA,eAAA,SAAA,UAAU,CAAA,sCAAA,8DAAE;oBAA/B,IAAM,SAAS,uBAAA;oBAChB,IAAI,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,EAAE;wBAC9B,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC;wBAClC,cAAc,GAAG,IAAI,CAAC;wBAEtB,OAAO;qBACV;iBACJ;;;;;;;;;;YAGD,IAAI,CAAC,cAAc,EAAE;gBACjB,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;gBAClC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;aAC1C;SACJ;KACJ;;;;;;;IAQD,wDAAiB,GAAjB,UAAkB,SAAiB;QAC/B,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,aAAa,EAAE,QAAQ,GAAG,SAAS,CAAC,CAAC;KAC/E;;;;;;;;IASD,mDAAY,GAAZ,UAAa,SAAiB;QAC1B,IAAM,KAAK,GAAG,IAAI,CAAC,OAAO,YAAY,UAAU,CAAC;QACjD,IAAM,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC;QAC5C,IAAM,gBAAgB,GAAG,CAAC,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC;QAErD,IAAI,aAAa,GAAG,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,qBAAqB,EAAE,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC;QACpG,IAAI,YAAY,GAAG,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,qBAAqB,EAAE,CAAC,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC;QACjG,IAAM,WAAW,GAAG,KAAK,CAAC,YAAY,CAAC;QACvC,IAAM,UAAU,GAAG,KAAK,CAAC,WAAW,CAAC;QACrC,IAAM,OAAO,GAAG,MAAM,CAAC,WAAW,CAAC;QAEnC,IAAI,gBAAgB,EAAE;YAClB,aAAa,GAAG,CAAC,CAAC;YAClB,YAAY,GAAG,CAAC,CAAC;SACpB;QAED,IAAI,QAAQ,CAAC;QACb,IAAI,SAAS,CAAC;QAEd,QAAQ,SAAS;YACb,KAAK,KAAK;gBACN,QAAQ,GAAG,CAAC,IAAI,CAAC,eAAe,CAAC,GAAG,GAAG,OAAO,KAAK,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC;gBACnF,SAAS,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC;gBAEtC,MAAM;YAEV,KAAK,QAAQ;gBACT,QAAQ,GAAG,CAAC,IAAI,CAAC,eAAe,CAAC,GAAG,GAAG,OAAO,IAAI,aAAa,GAAG,IAAI,CAAC,WAAW,CAAC;gBACnF,SAAS,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC;gBAEtC,MAAM;YACV,KAAK,MAAM;gBACP,SAAS,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,GAAG,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC;gBACtE,QAAQ,IAAI,IAAI,CAAC,eAAe,CAAC,GAAG,GAAG,OAAO,CAAC,CAAC;gBAEhD,MAAM;YAEV,KAAK,OAAO;gBACR,SAAS,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,GAAG,YAAY,GAAG,IAAI,CAAC,WAAW,CAAC;gBACxE,QAAQ,IAAI,IAAI,CAAC,eAAe,CAAC,GAAG,GAAG,OAAO,CAAC,CAAC;SAEvD;QAED,IAAI,CAAC,YAAY,GAAG,QAAQ,GAAG,IAAI,CAAC;QACpC,IAAI,CAAC,aAAa,GAAG,SAAS,GAAG,IAAI,CAAC;QAEtC,OAAO,IAAI,CAAC;KACf;;;;;;IAOD,gDAAS,GAAT;QACI,IAAI,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE;YAC/B,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;SAClD;KACJ;;;;;;IAOD,qDAAc,GAAd;QAAA,iBAMC;QALG,IAAI,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,EAAE;YAC7B,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,UAAC,SAAiB;gBAC7D,KAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAI,CAAC,UAAU,CAAC,aAAa,EAAE,SAAS,CAAC,CAAC;aACpE,CAAC,CAAC;SACN;KACJ;;;;;;IAOD,+CAAQ,GAAR;QACI,IAAI,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;YACvB,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,aAAa,EAAE,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;SAC3F;KACJ;IAED,oDAAa,GAAb;QACI,IAAI,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE;YACzB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;SAC1C;QAED,IAAI,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,EAAE;YAChC,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC;SACxD;KACJ;;;;;;IAQD,2DAAoB,GAApB;QACI,IAAI,CAAC,mBAAmB,GAAG,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,oBAAoB,CAAC,GAAG,IAAI,CAAC;KACrF;;;;;;IAOD,gDAAS,GAAT;QACI,IAAI,CAAC,SAAS,EAAE,CAAC;QACjB,IAAI,CAAC,oBAAoB,EAAE,CAAC;QAE5B,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QAC9C,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,GAAG,IAAI,CAAC;QAC1D,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,IAAI,GAAG,EAAE,CAAC;KACnF;;gBAnM+B,UAAU;gBAAoB,SAAS;gBAAuB,WAAW;;IA1EhG;QAAR,KAAK,EAAE;8DAAW;IAEO;QAAzB,WAAW,CAAC,WAAW,CAAC;sEAAsB;IACpB;QAA1B,WAAW,CAAC,YAAY,CAAC;uEAAuB;IACnB;QAA7B,WAAW,CAAC,eAAe,CAAC;yEAAyB;IACrB;QAAhC,WAAW,CAAC,kBAAkB,CAAC;6EAA6B;IACjC;QAA3B,WAAW,CAAC,aAAa,CAAC;wEAAwB;IACnB;QAA/B,WAAW,CAAC,iBAAiB,CAAC;2EAA2B;IACrB;QAApC,WAAW,CAAC,sBAAsB,CAAC;gFAAgC;IACnC;QAAhC,WAAW,CAAC,kBAAkB,CAAC;uEAAwB;IACrB;QAAlC,WAAW,CAAC,oBAAoB,CAAC;yEAA0B;IAQ5D;QADC,YAAY,CAAC,eAAe,EAAE,CAAC,EAAE,CAAC,CAAC;qEAOnC;IAEQ;QAAR,KAAK,EAAE;4DAKP;IA9CQ,4BAA4B;QANxC,SAAS,CAAC;YACP,QAAQ,EAAE,qBAAqB;YAC/B,+jDAAqD;YACrD,IAAI,EAAE,EAAE,KAAK,EAAE,OAAO,EAAE;;SAE3B,CAAC;OACW,4BAA4B,CA6RxC;IAAD,mCAAC;CA7RD;;;ICoDI,sCAC4D,WAAW,EAC3D,UAAsB,EACtB,wBAAkD,EAClD,MAAsB,EACtB,WAAwB,EACxB,QAAkB;QAL8B,gBAAW,GAAX,WAAW,CAAA;QAC3D,eAAU,GAAV,UAAU,CAAY;QACtB,6BAAwB,GAAxB,wBAAwB,CAA0B;QAClD,WAAM,GAAN,MAAM,CAAgB;QACtB,gBAAW,GAAX,WAAW,CAAa;QACxB,aAAQ,GAAR,QAAQ,CAAU;QA1C9B,oBAAe,GAAG,UAAU,CAAC;QAC7B,sBAAiB,GAAG,mBAAmB,CAAC;QACxC,sBAAiB,GAAG,mBAAmB,CAAC;QACxC,sBAAiB,GAAG,mBAAmB,CAAC;QACxC,+BAA0B,GAAG,0CAA0C,CAAC;QAExE,YAAO,GAAG,KAAK,CAAC;QAChB,eAAU,GAAG,EAAE,CAAC;QA0BN,WAAM,GAAsB,IAAI,YAAY,EAAO,CAAC;QACpD,UAAK,GAA0B,IAAI,YAAY,EAAE,CAAC;KAS3D;IA9BiB,sBAAI,sDAAY;aAAhB,UAAiB,KAAiC;YAChE,IAAI,KAAK,IAAI,cAAc,EAAE;gBACzB,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,SAAS,CAAC,cAAc,EAAE,KAAK,CAAC,CAAC;gBAC7D,IAAI,CAAC,mBAAmB,EAAE,CAAC;aAC9B;SACJ;;;OAAA;IA2BD,sBAAI,iDAAO;aAAX;YACI,OAAO,IAAI,CAAC,eAAe,CAAC;SAC/B;;;OAAA;IAED,sBAAI,0DAAgB;aAApB;YACI,OAAO,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,SAAS,CAAC;SACpE;;;OAAA;IASD,sBAAI,uDAAa;;;;;;;;aAAjB;YACI,IAAI,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE;gBAC1B,OAAO,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;aACnC;iBAAM;gBACH,OAAO,IAAI,CAAC,eAAe,CAAC;aAC/B;SACJ;;;OAAA;;;;;;IAQD,mDAAY,GAAZ,UAAa,KAAU;QACnB,IAAI,CAAC,qBAAqB,EAAE,CAAC;QAC7B,IAAI,CAAC,IAAI,EAAE,CAAC;QACZ,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;KAC7B;;;;;;IAMD,4DAAqB,GAArB;QACI,IAAI,IAAI,CAAC,KAAK,IAAI,cAAc,EAAE;YAC9B,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,SAAS,CAAC,cAAc,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;YAClE,IAAI,CAAC,mBAAmB,EAAE,CAAC;SAC9B;KACJ;;;;;;IAQD,mDAAY,GAAZ;QACI,IAAI,CAAC,YAAY,EAAE,CAAC;QACpB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;KACjC;;;;;;;IASD,8CAAO,GAAP,UAAQ,KAAa;QACjB,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;KAC7B;;;;;;;IAQD,kDAAW,GAAX,UAAY,OAAgC;QACxC,IAAM,cAAc,GAAG,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;QACnD,IAAI,CAAC,mBAAmB,CAAC,cAAc,EAAE,cAAc,CAAC,CAAC;KAC5D;;;;;;IAOD,kDAAW,GAAX;QACI,IAAI,CAAC,YAAY,EAAE,CAAC;QACpB,IAAI,IAAI,CAAC,kBAAkB,EAAE;YACzB,IAAI,CAAC,kBAAkB,CAAC,WAAW,EAAE,CAAC;SACzC;KACJ;;;;;;;;;IAUD,gDAAS,GAAT,UAAU,MAAkC,EAAE,MAAkC;;;;YAE5E,KAAkB,IAAA,KAAA,SAAA,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA,gBAAA,4BAAE;gBAAlC,IAAM,GAAG,WAAA;gBACV,IAAI,MAAM,CAAC,GAAG,CAAC,YAAY,MAAM,EAAE;oBAAE,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;iBAAE;aAC/G;;;;;;;;;;QAGD,MAAM,CAAC,MAAM,CAAC,MAAM,IAAI,EAAE,EAAE,MAAM,CAAC,CAAC;QAEpC,OAAO,MAAM,CAAC;KACjB;;;;;;IAOD,0DAAmB,GAAnB;QACI,IAAI,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,QAAQ,EAAE;YACrC,QAAQ,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,IAAI;gBAC/C,KAAK,QAAQ;oBACT,IAAI,CAAC,eAAe,GAAG,IAAI,MAAM,CAAC,UAAQ,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,MAAM,OAAI,CAAC,CAAC;oBAC7F,MAAM;gBAEV,KAAK,OAAO;oBACR,IAAI,CAAC,eAAe;wBAChB,IAAI,MAAM,CAAC,UAAQ,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,GAAG,SAAI,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,GAAG,OAAI,CAAC,CAAC;aAC5H;SACJ;KACJ;;;;;;;IAQD,oDAAa,GAAb,UAAc,UAAkB;QAC5B,IAAM,IAAI,GAAG;YACT,QAAQ,EAAE,UAAU,IAAI,UAAU,CAAC,MAAM,IAAI,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC,eAAe,CAAC,GAAG,IAAI,GAAG,KAAK;YAClG,gBAAgB,EAAE,UAAU,IAAI,UAAU,CAAC,MAAM,IAAI,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC,0BAA0B,CAAC,GAAG,IAAI,GAAG,KAAK;YACrH,gBAAgB,EAAE,UAAU,IAAI,UAAU,CAAC,MAAM,IAAI,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC,iBAAiB,CAAC,GAAG,IAAI,GAAG,KAAK;YAC5G,8BAA8B,EAAE,UAAU,IAAI,UAAU,CAAC,MAAM,IAAI,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC,iBAAiB,CAAC,GAAG,IAAI,GAAG,KAAK;YAC1H,8BAA8B,EAAE,UAAU,IAAI,UAAU,CAAC,MAAM,IAAI,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC,iBAAiB,CAAC,GAAG,IAAI,GAAG,KAAK;SAC7H,CAAC;QAEF,KAAK,IAAM,QAAQ,IAAI,IAAI,CAAC,eAAe,CAAC,KAAK,EAAE;YAC/C,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE;gBACvC,OAAO,IAAI,CAAC,QAAQ,CAAC,CAAC;aACzB;SACJ;QACD,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,UAAC,KAAc,IAAK,OAAA,KAAK,GAAA,CAAC,CAAC;QACpE,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;KACtC;;;;;;;;IASD,oDAAa,GAAb,UAAc,OAAgC;QAC1C,IAAM,mBAAmB,GAAQ,EAAE,CAAC;QACpC,IAAI,gBAAgB,GAAQ,EAAE,CAAC;QAC/B,IAAI,aAAa,GAAQ,EAAE,CAAC;;QAG5B,KAAK,IAAM,IAAI,IAAI,OAAO,EAAE;YACxB,IAAI,IAAI,KAAK,SAAS,EAAE;gBACpB,mBAAmB,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,YAAY,CAAC;aAC1D;YACD,IAAI,IAAI,KAAK,SAAS,EAAE;gBACpB,gBAAgB,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,YAAY,CAAC;aACjD;SACJ;QAED,aAAa,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,gBAAgB,EAAE,mBAAmB,CAAC,CAAC;QAEzE,OAAO,aAAa,CAAC;KACxB;;;;;;IAOD,yDAAkB,GAAlB;QACI,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,qBAAqB,EAAE,CAAC;KAChF;;;;;;IAOD,kDAAW,GAAX;QACI,IAAI,CAAC,kBAAkB,EAAE,CAAC;QAC1B,IAAI,CAAC,qBAAqB,CAAC,4BAA4B,CAAC,CAAC;QACzD,IAAI,CAAC,aAAa,EAAE,CAAC;KACxB;;;;;;;IAQD,mDAAY,GAAZ;QACI,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE;YACxB,IAAI,CAAC,SAAS,EAAE,CAAC;YAEjB,IAAI,CAAC,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,gBAAgB,EAAE;gBAC7C,OAAO;aACV;YAED,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;YACnD,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,CAAC;YAC5B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;gBACb,IAAI,EAAE,QAAQ;gBACd,QAAQ,EAAE,IAAI,CAAC,aAAa;aAC/B,CAAC,CAAC;SACN;KACJ;;;;;;IAOD,oDAAa,GAAb;QACK,IAAI,CAAC,YAAY,CAAC,QAA0B,CAAC,IAAI,GAAG,IAAI,CAAC;QAC1D,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;YACb,IAAI,EAAE,MAAM;YACZ,QAAQ,EAAE,IAAI,CAAC,aAAa;SAC/B,CAAC,CAAC;KACN;;;;;;;IAQD,gDAAS,GAAT;QACI,IAAI,CAAC,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,gBAAgB,EAAE;YAC7C,OAAO;SACV;QACA,IAAI,CAAC,YAAY,CAAC,QAA0B,CAAC,IAAI,GAAG,KAAK,CAAC;QAC3D,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;YACb,IAAI,EAAE,MAAM;YACZ,QAAQ,EAAE,IAAI,CAAC,aAAa;SAC/B,CAAC,CAAC;KACN;;;;;;;IAQD,4DAAqB,GAArB,UAAsB,SAAc;QAApC,iBAkBC;QAjBG,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,wBAAwB;aAC5C,uBAAuB,CAAC,SAAS,CAAC;aAClC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC1B,IAAI,CAAC,YAAY,CAAC,QAA0B,CAAC,IAAI,GAAG;YACjD,OAAO,EAAE,IAAI,CAAC,UAAU,CAAC,aAAa;YACtC,eAAe,EAAE,IAAI,CAAC,aAAa;YACnC,OAAO,EAAE,IAAI,CAAC,OAAO;YACrB,cAAc,gBAAA;SACjB,CAAC;QAEF,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;QACnD,IAAM,OAAO,GAAI,IAAI,CAAC,YAAY,CAAC,QAAiC,CAAC,SAAS,CAAC,CAAC,CAAgB,CAAC;QACjG,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;QAEnC,IAAI,CAAC,kBAAkB,GAAI,IAAI,CAAC,YAAY,CAAC,QAA0B,CAAC,MAAM,CAAC,SAAS,CAAC,UAAC,KAAU;YAChG,KAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;SAC5B,CAAC,CAAC;KACN;;;;;;;;IASD,0DAAmB,GAAnB,UAAoB,OAAgC,EAAE,aAAyC;QAC3F,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,WAAW,IAAI,EAAE,EAAE,OAAO,EAAE,aAAa,CAAC,CAAC;KACxF;;;;;;;IAQD,mDAAY,GAAZ,UAAa,KAAU;QACnB,IAAI,KAAK,CAAC,IAAI,KAAK,OAAO,EAAE;YACxB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;gBACb,IAAI,EAAE,OAAO;gBACb,QAAQ,EAAE,IAAI,CAAC,aAAa;aAC/B,CAAC,CAAC;SACN;KACJ;;;;;;IAOD,2CAAI,GAAJ;QACI,IAAI,CAAC,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,gBAAgB,EAAE;YAC7C,IAAI,CAAC,WAAW,EAAE,CAAC;SACtB;aAAM,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE;YAC/B,IAAI,CAAC,aAAa,EAAE,CAAC;SACxB;KACJ;;;;;;IAOD,2CAAI,GAAJ;QACI,IAAI,CAAC,YAAY,EAAE,CAAC;KACvB;;gDA9UI,QAAQ,YAAI,MAAM,SAAC,0BAA0B;gBAC1B,UAAU;gBACI,wBAAwB;gBAC1C,cAAc;gBACT,WAAW;gBACd,QAAQ;;IA7BZ;QAAjB,KAAK,CAAC,SAAS,CAAC;oEAKhB;IAC6B;QAA7B,KAAK,CAAC,qBAAqB,CAAC;+DAAmC;IAC5C;QAAnB,KAAK,CAAC,WAAW,CAAC;mEAAmB;IACpB;QAAjB,KAAK,CAAC,SAAS,CAAC;gEAAgB;IACJ;QAA5B,KAAK,CAAC,oBAAoB,CAAC;2EAA2B;IAChC;QAAtB,KAAK,CAAC,cAAc,CAAC;qEAAqB;IAC1B;QAAhB,KAAK,CAAC,QAAQ,CAAC;gEAAiB;IACjB;QAAf,KAAK,CAAC,OAAO,CAAC;+DAAwB;IACtB;QAAhB,KAAK,CAAC,QAAQ,CAAC;gEAAgB;IAChB;QAAf,KAAK,CAAC,OAAO,CAAC;+DAAe;IACV;QAAnB,KAAK,CAAC,WAAW,CAAC;kEAAkB;IAClB;QAAlB,KAAK,CAAC,UAAU,CAAC;kEAAqB;IACrB;QAAjB,KAAK,CAAC,SAAS,CAAC;iEAAiB;IACT;QAAxB,KAAK,CAAC,gBAAgB,CAAC;wEAAwB;IAEtC;QAAT,MAAM,EAAE;gEAAqD;IACpD;QAAT,MAAM,EAAE;+DAAmD;IAwC5D;QADC,YAAY,CAAC,SAAS,EAAE,CAAC,qBAAqB,CAAC,CAAC;oEAKhD;IAmBD;QADC,YAAY,CAAC,UAAU,CAAC;oEAIxB;IASD;QADC,YAAY,CAAC,OAAO,EAAE,CAAC,qBAAqB,CAAC,CAAC;+DAG9C;IAhHQ,4BAA4B;QALxC,SAAS,CAAC;YACP,QAAQ,EAAE,uBAAuB;YACjC,QAAQ,EAAE,qBAAqB;SAClC,CAAC;QAwCO,WAAA,QAAQ,EAAE,CAAA,EAAE,WAAA,MAAM,CAAC,0BAA0B,CAAC,CAAA;OAtC1C,4BAA4B,CAqXxC;IAAD,mCAAC;CArXD;;;ICbA;KAqBC;kCArBY,yBAAyB;;;;;;;;;IAU3B,iCAAO,GAAd,UAAe,WAAuC;QAClD,OAAO;YACH,QAAQ,EAAE,2BAAyB;YACnC,SAAS,EAAE;gBACP;oBACI,OAAO,EAAE,0BAA0B;oBACnC,QAAQ,EAAE,WAAW;iBACxB;aACJ;SACJ,CAAC;KACL;;IApBQ,yBAAyB;QAhBrC,QAAQ,CAAC;YACN,YAAY,EAAE;gBACV,4BAA4B;gBAC5B,4BAA4B;aAC/B;YACD,OAAO,EAAE;gBACL,YAAY;aACf;YACD,SAAS,EAAE,CAAC,WAAW,CAAC;YACxB,OAAO,EAAE;gBACL,4BAA4B;aAC/B;YACD,eAAe,EAAE;gBACb,4BAA4B;aAC/B;SACJ,CAAC;OACW,yBAAyB,CAqBrC;IAAD,gCAAC;CArBD;;ACxBA;;;;;;"}